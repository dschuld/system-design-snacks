{
  "id": "data-architecture-patterns",
  "title": "Data Architecture Patterns",
  "totalLessons": 6,
  "available": true,
  "lessons": [
    {
      "id": 1,
      "title": "Why Do We Need Data Architecture Patterns?",
      "goals": [
        "Identify the scaling and coupling problems that force distributed data architecture decisions",
        "Understand the trade-offs between data consistency, availability, and system independence",
        "Recognize when monolithic database approaches become system bottlenecks"
      ],
      "content": "<div class=\"concept-section\">\n  <h3>The Shared Database Problem</h3>\n  <p>Imagine a growing company where every department shares the same filing cabinet. Initially, this works fine‚Äîmarketing, sales, and engineering can all access the information they need. But as the company grows, conflicts emerge: marketing needs to reorganize customer files while sales is processing orders, and engineering wants to restructure the entire filing system.</p>\n  <p>This is exactly what happens with <strong>shared database architecture</strong> in software systems. Multiple services sharing a single database creates tight coupling that eventually strangles system evolution and scalability.</p>\n</div>\n<div class=\"concept-section\">\n  <h3>The Monolithic Database Limitations</h3>\n  <ul>\n    <li><strong>Deployment coupling:</strong> Schema changes require coordinating all services</li>\n    <li><strong>Technology lock-in:</strong> All services must use the same database technology</li>\n    <li><strong>Scaling bottlenecks:</strong> Single database becomes the limiting factor</li>\n    <li><strong>Team dependencies:</strong> Database changes require cross-team coordination</li>\n    <li><strong>Failure blast radius:</strong> Database issues affect all services simultaneously</li>\n  </ul>\n</div>\n<div class=\"concept-section\">\n  <h3>The CAP Theorem Reality</h3>\n  <p>In distributed systems, you can only guarantee 2 out of 3 properties simultaneously:</p>\n  <div style=\"background: #fff; border: 2px solid #e9ecef; border-radius: 8px; padding: 20px; margin: 20px 0; text-align: center;\">\n    <div style=\"position: relative; width: 300px; height: 250px; margin: 20px auto;\">\n      <div style=\"position: absolute; width: 80px; height: 80px; border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; font-size: 14px; text-align: center; line-height: 1.2; background: #e74c3c; top: 0; left: 110px;\">Consistency</div>\n      <div style=\"position: absolute; width: 80px; height: 80px; border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; font-size: 14px; text-align: center; line-height: 1.2; background: #3498db; bottom: 0; left: 0;\">Availability</div>\n      <div style=\"position: absolute; width: 80px; height: 80px; border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; font-size: 14px; text-align: center; line-height: 1.2; background: #27ae60; bottom: 0; right: 0;\">Partition Tolerance</div>\n    </div>\n    <p><strong>You must choose 2:</strong> Network partitions will happen in distributed systems</p>\n  </div>\n  <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;\">\n    <div style=\"background: #e8f5e8; padding: 20px; border-radius: 10px;\">\n      <h4>Consistency</h4>\n      <p>All nodes see the same data at the same time</p>\n      <ul>\n        <li>‚úÖ Data accuracy guaranteed</li>\n        <li>‚ùå May sacrifice availability during network issues</li>\n      </ul>\n    </div>\n    <div style=\"background: #e3f2fd; padding: 20px; border-radius: 10px;\">\n      <h4>Availability</h4>\n      <p>System remains operational during failures</p>\n      <ul>\n        <li>‚úÖ Users can always interact with the system</li>\n        <li>‚ùå May serve stale or inconsistent data</li>\n      </ul>\n    </div>\n  </div>\n  <p><strong>Partition Tolerance</strong> is non-negotiable in distributed systems‚Äînetwork failures will happen. This forces you to choose between consistency and availability for different parts of your system.</p>\n</div>\n<div class=\"concept-section\">\n  <h3>Real-World Evolution: Netflix's Journey</h3>\n  <p>Netflix started with a monolithic application and shared Oracle database. As they grew:</p>\n  <ul>\n    <li><strong>2008-2010:</strong> Monolithic application, single Oracle database</li>\n    <li><strong>2010-2012:</strong> Service-oriented architecture, still shared database</li>\n    <li><strong>2012-2015:</strong> Microservices with service-specific data stores</li>\n    <li><strong>2015+:</strong> Hundreds of microservices, dozens of database technologies</li>\n  </ul>\n  <p><strong>Key insight:</strong> They didn't start with complex data architecture‚Äîthey evolved toward it as scaling pressures demanded.</p>\n</div>\n<div class=\"exercise\">\n  <h3>üõ†Ô∏è Identify Architectural Pressure Points</h3>\n  <p><strong>Scenario:</strong> You're working on an e-commerce platform that started as a monolith with a single PostgreSQL database. The system handles users, products, orders, inventory, and reviews. You're experiencing these issues:</p>\n  <ul>\n    <li>Product search queries slow down order processing</li>\n    <li>Inventory updates during flash sales cause database locks</li>\n    <li>Adding new review features requires coordinating with the checkout team</li>\n    <li>The marketing team wants to experiment with a graph database for recommendations</li>\n  </ul>\n  <p><strong>Your task:</strong> Identify which problems are caused by shared database architecture vs other factors. For each shared database problem, explain how it limits your system's evolution.</p>\n  <p><strong>Consider:</strong> Which teams are most affected by the current architecture? What would happen if the database went down during peak shopping hours?</p>\n</div>"
    },
    {
      "id": 2,
      "title": "Database-per-Service Pattern Fundamentals",
      "goals": [
        "Master the database-per-service pattern and its benefits for system independence",
        "Understand how to define proper service boundaries around data ownership",
        "Learn when to separate databases vs when shared data makes business sense"
      ],
      "content": "<div class=\"concept-section\">\n  <h3>The Database-per-Service Principle</h3>\n  <p>Database-per-service means each microservice owns and manages its data exclusively. Think of it like giving each department in a company its own filing cabinet with a lock‚Äîno other department can directly access or modify another's files.</p>\n  <div style=\"background: #fff; border: 2px solid #e9ecef; border-radius: 8px; padding: 20px; margin: 20px 0; text-align: center;\">\n    <h4>Before: Shared Database (Monolithic)</h4>\n    <div style=\"display: flex; justify-content: space-around; align-items: center; margin: 20px 0; flex-wrap: wrap; gap: 20px;\">\n      <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px 20px; border-radius: 8px; font-weight: bold; text-align: center; min-width: 120px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">User Service</div>\n      <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px 20px; border-radius: 8px; font-weight: bold; text-align: center; min-width: 120px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">Order Service</div>\n      <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px 20px; border-radius: 8px; font-weight: bold; text-align: center; min-width: 120px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">Inventory Service</div>\n    </div>\n    <div style=\"font-size: 24px; color: #6c757d; margin: 0 10px;\">‚Üì</div>\n    <div style=\"background: linear-gradient(135deg, #ffeaa7 0%, #fab1a0 100%); color: #2d3436; padding: 15px 25px; border-radius: 8px; font-weight: bold; text-align: center; min-width: 200px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">Shared Database</div>\n    <hr style=\"margin: 30px 0; border: 2px solid #28a745;\">\n    <h4>After: Database-per-Service</h4>\n    <div style=\"display: flex; justify-content: space-around; align-items: center; margin: 20px 0; flex-wrap: wrap; gap: 20px;\">\n      <div style=\"display: flex; flex-direction: column; align-items: center; gap: 10px;\">\n        <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px 20px; border-radius: 8px; font-weight: bold; text-align: center; min-width: 120px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">User Service</div>\n        <div style=\"width: 2px; height: 30px; background: #6c757d; margin: 5px 0;\"></div>\n        <div style=\"background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white; padding: 10px 15px; border-radius: 6px; font-size: 14px; text-align: center; min-width: 100px; margin-top: 10px;\">User DB</div>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; gap: 10px;\">\n        <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px 20px; border-radius: 8px; font-weight: bold; text-align: center; min-width: 120px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">Order Service</div>\n        <div style=\"width: 2px; height: 30px; background: #6c757d; margin: 5px 0;\"></div>\n        <div style=\"background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white; padding: 10px 15px; border-radius: 6px; font-size: 14px; text-align: center; min-width: 100px; margin-top: 10px;\">Order DB</div>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; gap: 10px;\">\n        <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px 20px; border-radius: 8px; font-weight: bold; text-align: center; min-width: 120px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">Inventory Service</div>\n        <div style=\"width: 2px; height: 30px; background: #6c757d; margin: 5px 0;\"></div>\n        <div style=\"background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white; padding: 10px 15px; border-radius: 6px; font-size: 14px; text-align: center; min-width: 100px; margin-top: 10px;\">Inventory DB</div>\n      </div>\n    </div>\n  </div>\n  <p>This pattern ensures that services are <strong>loosely coupled</strong> and <strong>highly cohesive</strong>. Each service can evolve its data model, choose its storage technology, and scale independently without affecting other services.</p>\n</div>\n<div class=\"concept-section\">\n  <h3>Core Benefits of Data Isolation</h3>\n  <ul>\n    <li><strong>Technology freedom:</strong> Service A can use PostgreSQL while Service B uses MongoDB</li>\n    <li><strong>Independent scaling:</strong> Scale databases based on each service's specific needs</li>\n    <li><strong>Deployment autonomy:</strong> Schema changes don't require cross-service coordination</li>\n    <li><strong>Failure isolation:</strong> One service's database issues don't cascade to others</li>\n    <li><strong>Team ownership:</strong> Clear responsibility boundaries for data and operations</li>\n  </ul>\n</div>\n<div class=\"concept-section\">\n  <h3>Defining Service Boundaries</h3>\n  <p>The key question: <em>\"What data does this service need to own to fulfill its business capability?\"</em></p>\n  <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;\">\n    <div style=\"background: #e8f5e8; padding: 20px; border-radius: 10px;\">\n      <h4>Good Service Boundaries</h4>\n      <ul>\n        <li>‚úÖ User Service owns user profiles, preferences, authentication</li>\n        <li>‚úÖ Order Service owns order history, payment status, fulfillment</li>\n        <li>‚úÖ Inventory Service owns stock levels, warehouse locations</li>\n      </ul>\n    </div>\n    <div style=\"background: #fff3e0; padding: 20px; border-radius: 10px;\">\n      <h4>Poor Service Boundaries</h4>\n      <ul>\n        <li>‚ùå Order Service needs to write to inventory database directly</li>\n        <li>‚ùå User Service and Notification Service share user preferences table</li>\n        <li>‚ùå Multiple services updating the same product rating table</li>\n      </ul>\n    </div>\n  </div>\n</div>\n<div class=\"concept-section\">\n  <h3>Communication Between Services</h3>\n  <p>When services need data from each other, they communicate through <strong>well-defined APIs</strong>, never through direct database access.</p>\n  <div style=\"background: #fff; border: 2px solid #e9ecef; border-radius: 8px; padding: 20px; margin: 20px 0; text-align: center;\">\n    <h4>‚úÖ Correct: API Communication</h4>\n    <div style=\"display: flex; align-items: center; justify-content: space-between; margin: 20px 0; flex-wrap: wrap; gap: 15px;\">\n      <div style=\"display: flex; flex-direction: column; align-items: center; gap: 10px;\">\n        <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px 20px; border-radius: 8px; font-weight: bold; text-align: center; min-width: 120px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">Order Service</div>\n        <div style=\"width: 2px; height: 30px; background: #6c757d; margin: 5px 0;\"></div>\n        <div style=\"background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white; padding: 10px 15px; border-radius: 6px; font-size: 14px; text-align: center; min-width: 100px; margin-top: 10px;\">Order DB</div>\n      </div>\n      <div style=\"background: #28a745; color: white; padding: 8px 15px; border-radius: 20px; font-size: 12px; font-weight: bold; white-space: nowrap;\">GET /users/123</div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; gap: 10px;\">\n        <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px 20px; border-radius: 8px; font-weight: bold; text-align: center; min-width: 120px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">User Service</div>\n        <div style=\"width: 2px; height: 30px; background: #6c757d; margin: 5px 0;\"></div>\n        <div style=\"background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white; padding: 10px 15px; border-radius: 6px; font-size: 14px; text-align: center; min-width: 100px; margin-top: 10px;\">User DB</div>\n      </div>\n    </div>\n    <hr style=\"margin: 20px 0; border: 1px solid #e9ecef;\">\n    <h4>‚ùå Wrong: Direct Database Access</h4>\n    <div style=\"display: flex; justify-content: space-around; align-items: center; margin: 20px 0; flex-wrap: wrap; gap: 20px;\">\n      <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px 20px; border-radius: 8px; font-weight: bold; text-align: center; min-width: 120px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">Order Service</div>\n      <div style=\"background: #dc3545; color: white; padding: 8px 15px; border-radius: 20px; font-size: 12px; font-weight: bold; white-space: nowrap;\">Direct SQL Query</div>\n      <div style=\"background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white; padding: 10px 15px; border-radius: 6px; font-size: 14px; text-align: center; min-width: 100px; margin-top: 10px;\">User DB</div>\n    </div>\n  </div>\n  <div style=\"background: #f8f9fa; padding: 15px; font-family: monospace; border-radius: 6px; margin: 15px 0; border: 1px solid #e9ecef;\">\n    // ‚ùå DON'T: Direct database access<br>\n    User user = userDatabase.findById(userId);<br><br>\n    // ‚úÖ DO: API call to User Service<br>\n    User user = userServiceClient.getUser(userId);<br><br>\n    // ‚úÖ DO: Event-driven updates<br>\n    orderCreated -> inventoryService.reserveItems(order.items)\n  </div>\n</div>\n<div class=\"concept-section\">\n  <h3>When NOT to Separate Databases</h3>\n  <p>Database-per-service isn't always the right choice. Consider keeping shared databases when:</p>\n  <ul>\n    <li><strong>ACID transactions required:</strong> Financial transactions spanning accounts and payments</li>\n    <li><strong>Real-time consistency needed:</strong> Inventory checks during checkout</li>\n    <li><strong>Complex reporting:</strong> Analytics requiring joins across multiple domains</li>\n    <li><strong>Small team/early stage:</strong> Operational complexity outweighs benefits</li>\n    <li><strong>Tightly coupled data:</strong> User profiles and user preferences are rarely independent</li>\n  </ul>\n</div>\n<div class=\"concept-section\">\n  <h3>Evolution Strategy: Gradual Extraction</h3>\n  <p>Most successful implementations start with a monolith and gradually extract services:</p>\n  <ol>\n    <li><strong>Identify bounded contexts</strong> within your monolithic database</li>\n    <li><strong>Extract read-only services first</strong> (less risk, easier rollback)</li>\n    <li><strong>Duplicate data temporarily</strong> during transition periods</li>\n    <li><strong>Implement event-driven synchronization</strong> between old and new systems</li>\n    <li><strong>Cut over gradually</strong> one workflow at a time</li>\n  </ol>\n</div>\n<div class=\"exercise\">\n  <h3>üõ†Ô∏è Design Service Data Boundaries</h3>\n  <p><strong>Scenario:</strong> You're extracting services from a monolithic e-commerce application. The current database contains these main entities:</p>\n  <ul>\n    <li><strong>Users:</strong> profiles, addresses, payment methods, preferences</li>\n    <li><strong>Products:</strong> catalog, descriptions, images, categories, pricing</li>\n    <li><strong>Orders:</strong> order details, line items, shipping info, payment records</li>\n    <li><strong>Reviews:</strong> ratings, comments, helpful votes, moderation flags</li>\n    <li><strong>Inventory:</strong> stock levels, warehouse locations, reorder points</li>\n    <li><strong>Analytics:</strong> page views, conversion tracking, A/B test results</li>\n  </ul>\n  <p><strong>Your task:</strong> Design 4-5 services with clear data ownership. For each service, specify:</p>\n  <ul>\n    <li>What data it owns exclusively</li>\n    <li>What data it needs from other services</li>\n    <li>How it would get that external data (API calls, events, caching)</li>\n  </ul>\n  <p><strong>Consider:</strong> How would you handle the checkout flow that needs user info, product details, inventory levels, and order creation?</p>\n  <p><em>Bonus: Identify one entity that might be harder to assign to a single service and explain why.</em></p>\n</div>"
    }
    ]
}