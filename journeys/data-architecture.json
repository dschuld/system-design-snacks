{
  "id": "data-architecture-patterns",
  "title": "Data Architecture Patterns",
  "totalLessons": 6,
  "available": true,
  "lessons": [
    {
      "id": 1,
      "title": "Why Do We Need Data Architecture Patterns?",
      "goals": [
        "Identify the scaling and coupling problems that force distributed data architecture decisions",
        "Understand the trade-offs between data consistency, availability, and system independence",
        "Recognize when monolithic database approaches become system bottlenecks"
      ],
      "content": "<div class=\"concept-section\">\n  <h3>The Shared Database Problem</h3>\n  <p>Imagine a growing company where every department shares the same filing cabinet. Initially, this works fine‚Äîmarketing, sales, and engineering can all access the information they need. But as the company grows, conflicts emerge: marketing needs to reorganize customer files while sales is processing orders, and engineering wants to restructure the entire filing system.</p>\n  <p>This is exactly what happens with <strong>shared database architecture</strong> in software systems. Multiple services sharing a single database creates tight coupling that eventually strangles system evolution and scalability.</p>\n</div>\n<div class=\"concept-section\">\n  <h3>The Monolithic Database Limitations</h3>\n  <ul>\n    <li><strong>Deployment coupling:</strong> Schema changes require coordinating all services</li>\n    <li><strong>Technology lock-in:</strong> All services must use the same database technology</li>\n    <li><strong>Scaling bottlenecks:</strong> Single database becomes the limiting factor</li>\n    <li><strong>Team dependencies:</strong> Database changes require cross-team coordination</li>\n    <li><strong>Failure blast radius:</strong> Database issues affect all services simultaneously</li>\n  </ul>\n</div>\n<div class=\"concept-section\">\n  <h3>The CAP Theorem Reality</h3>\n  <p>In distributed systems, you can only guarantee 2 out of 3 properties simultaneously:</p>\n  <div style=\"background: #fff; border: 2px solid #e9ecef; border-radius: 8px; padding: 20px; margin: 20px 0; text-align: center;\">\n    <div style=\"position: relative; width: 300px; height: 250px; margin: 20px auto;\">\n      <div style=\"position: absolute; width: 80px; height: 80px; border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; font-size: 14px; text-align: center; line-height: 1.2; background: #e74c3c; top: 0; left: 110px;\">Consistency</div>\n      <div style=\"position: absolute; width: 80px; height: 80px; border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; font-size: 14px; text-align: center; line-height: 1.2; background: #3498db; bottom: 0; left: 0;\">Availability</div>\n      <div style=\"position: absolute; width: 80px; height: 80px; border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; font-size: 14px; text-align: center; line-height: 1.2; background: #27ae60; bottom: 0; right: 0;\">Partition Tolerance</div>\n    </div>\n    <p><strong>You must choose 2:</strong> Network partitions will happen in distributed systems</p>\n  </div>\n  <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;\">\n    <div style=\"background: #e8f5e8; padding: 20px; border-radius: 10px;\">\n      <h4>Consistency</h4>\n      <p>All nodes see the same data at the same time</p>\n      <ul>\n        <li>‚úÖ Data accuracy guaranteed</li>\n        <li>‚ùå May sacrifice availability during network issues</li>\n      </ul>\n    </div>\n    <div style=\"background: #e3f2fd; padding: 20px; border-radius: 10px;\">\n      <h4>Availability</h4>\n      <p>System remains operational during failures</p>\n      <ul>\n        <li>‚úÖ Users can always interact with the system</li>\n        <li>‚ùå May serve stale or inconsistent data</li>\n      </ul>\n    </div>\n  </div>\n  <p><strong>Partition Tolerance</strong> is non-negotiable in distributed systems‚Äînetwork failures will happen. This forces you to choose between consistency and availability for different parts of your system.</p>\n</div>\n<div class=\"concept-section\">\n  <h3>Real-World Evolution: Netflix's Journey</h3>\n  <p>Netflix started with a monolithic application and shared Oracle database. As they grew:</p>\n  <ul>\n    <li><strong>2008-2010:</strong> Monolithic application, single Oracle database</li>\n    <li><strong>2010-2012:</strong> Service-oriented architecture, still shared database</li>\n    <li><strong>2012-2015:</strong> Microservices with service-specific data stores</li>\n    <li><strong>2015+:</strong> Hundreds of microservices, dozens of database technologies</li>\n  </ul>\n  <p><strong>Key insight:</strong> They didn't start with complex data architecture‚Äîthey evolved toward it as scaling pressures demanded.</p>\n</div>\n<div class=\"exercise\">\n  <h3>üõ†Ô∏è Identify Architectural Pressure Points</h3>\n  <p><strong>Scenario:</strong> You're working on an e-commerce platform that started as a monolith with a single PostgreSQL database. The system handles users, products, orders, inventory, and reviews. You're experiencing these issues:</p>\n  <ul>\n    <li>Product search queries slow down order processing</li>\n    <li>Inventory updates during flash sales cause database locks</li>\n    <li>Adding new review features requires coordinating with the checkout team</li>\n    <li>The marketing team wants to experiment with a graph database for recommendations</li>\n  </ul>\n  <p><strong>Your task:</strong> Identify which problems are caused by shared database architecture vs other factors. For each shared database problem, explain how it limits your system's evolution.</p>\n  <p><strong>Consider:</strong> Which teams are most affected by the current architecture? What would happen if the database went down during peak shopping hours?</p>\n</div>"
    },
    {
      "id": 2,
      "title": "Database-per-Service Pattern Fundamentals",
      "goals": [
        "Master the database-per-service pattern and its benefits for system independence",
        "Understand how to define proper service boundaries around data ownership",
        "Learn when to separate databases vs when shared data makes business sense"
      ],
      "content": "<div class=\"concept-section\">\n  <h3>The Database-per-Service Principle</h3>\n  <p>Database-per-service means each microservice owns and manages its data exclusively. Think of it like giving each department in a company its own filing cabinet with a lock‚Äîno other department can directly access or modify another's files.</p>\n  <div style=\"background: #fff; border: 2px solid #e9ecef; border-radius: 8px; padding: 20px; margin: 20px 0; text-align: center;\">\n    <h4>Before: Shared Database (Monolithic)</h4>\n    <div style=\"display: flex; justify-content: space-around; align-items: center; margin: 20px 0; flex-wrap: wrap; gap: 20px;\">\n      <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px 20px; border-radius: 8px; font-weight: bold; text-align: center; min-width: 120px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">User Service</div>\n      <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px 20px; border-radius: 8px; font-weight: bold; text-align: center; min-width: 120px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">Order Service</div>\n      <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px 20px; border-radius: 8px; font-weight: bold; text-align: center; min-width: 120px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">Inventory Service</div>\n    </div>\n    <div style=\"font-size: 24px; color: #6c757d; margin: 0 10px;\">‚Üì</div>\n    <div style=\"background: linear-gradient(135deg, #ffeaa7 0%, #fab1a0 100%); color: #2d3436; padding: 15px 25px; border-radius: 8px; font-weight: bold; text-align: center; min-width: 200px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">Shared Database</div>\n    <hr style=\"margin: 30px 0; border: 2px solid #28a745;\">\n    <h4>After: Database-per-Service</h4>\n    <div style=\"display: flex; justify-content: space-around; align-items: center; margin: 20px 0; flex-wrap: wrap; gap: 20px;\">\n      <div style=\"display: flex; flex-direction: column; align-items: center; gap: 10px;\">\n        <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px 20px; border-radius: 8px; font-weight: bold; text-align: center; min-width: 120px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">User Service</div>\n        <div style=\"width: 2px; height: 30px; background: #6c757d; margin: 5px 0;\"></div>\n        <div style=\"background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white; padding: 10px 15px; border-radius: 6px; font-size: 14px; text-align: center; min-width: 100px; margin-top: 10px;\">User DB</div>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; gap: 10px;\">\n        <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px 20px; border-radius: 8px; font-weight: bold; text-align: center; min-width: 120px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">Order Service</div>\n        <div style=\"width: 2px; height: 30px; background: #6c757d; margin: 5px 0;\"></div>\n        <div style=\"background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white; padding: 10px 15px; border-radius: 6px; font-size: 14px; text-align: center; min-width: 100px; margin-top: 10px;\">Order DB</div>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; gap: 10px;\">\n        <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px 20px; border-radius: 8px; font-weight: bold; text-align: center; min-width: 120px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">Inventory Service</div>\n        <div style=\"width: 2px; height: 30px; background: #6c757d; margin: 5px 0;\"></div>\n        <div style=\"background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white; padding: 10px 15px; border-radius: 6px; font-size: 14px; text-align: center; min-width: 100px; margin-top: 10px;\">Inventory DB</div>\n      </div>\n    </div>\n  </div>\n  <p>This pattern ensures that services are <strong>loosely coupled</strong> and <strong>highly cohesive</strong>. Each service can evolve its data model, choose its storage technology, and scale independently without affecting other services.</p>\n</div>\n<div class=\"concept-section\">\n  <h3>Core Benefits of Data Isolation</h3>\n  <ul>\n    <li><strong>Technology freedom:</strong> Service A can use PostgreSQL while Service B uses MongoDB</li>\n    <li><strong>Independent scaling:</strong> Scale databases based on each service's specific needs</li>\n    <li><strong>Deployment autonomy:</strong> Schema changes don't require cross-service coordination</li>\n    <li><strong>Failure isolation:</strong> One service's database issues don't cascade to others</li>\n    <li><strong>Team ownership:</strong> Clear responsibility boundaries for data and operations</li>\n  </ul>\n</div>\n<div class=\"concept-section\">\n  <h3>Defining Service Boundaries</h3>\n  <p>The key question: <em>\"What data does this service need to own to fulfill its business capability?\"</em></p>\n  <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;\">\n    <div style=\"background: #e8f5e8; padding: 20px; border-radius: 10px;\">\n      <h4>Good Service Boundaries</h4>\n      <ul>\n        <li>‚úÖ User Service owns user profiles, preferences, authentication</li>\n        <li>‚úÖ Order Service owns order history, payment status, fulfillment</li>\n        <li>‚úÖ Inventory Service owns stock levels, warehouse locations</li>\n      </ul>\n    </div>\n    <div style=\"background: #fff3e0; padding: 20px; border-radius: 10px;\">\n      <h4>Poor Service Boundaries</h4>\n      <ul>\n        <li>‚ùå Order Service needs to write to inventory database directly</li>\n        <li>‚ùå User Service and Notification Service share user preferences table</li>\n        <li>‚ùå Multiple services updating the same product rating table</li>\n      </ul>\n    </div>\n  </div>\n</div>\n<div class=\"concept-section\">\n  <h3>Communication Between Services</h3>\n  <p>When services need data from each other, they communicate through <strong>well-defined APIs</strong>, never through direct database access.</p>\n  <div style=\"background: #fff; border: 2px solid #e9ecef; border-radius: 8px; padding: 20px; margin: 20px 0; text-align: center;\">\n    <h4>‚úÖ Correct: API Communication</h4>\n    <div style=\"display: flex; align-items: center; justify-content: space-between; margin: 20px 0; flex-wrap: wrap; gap: 15px;\">\n      <div style=\"display: flex; flex-direction: column; align-items: center; gap: 10px;\">\n        <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px 20px; border-radius: 8px; font-weight: bold; text-align: center; min-width: 120px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">Order Service</div>\n        <div style=\"width: 2px; height: 30px; background: #6c757d; margin: 5px 0;\"></div>\n        <div style=\"background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white; padding: 10px 15px; border-radius: 6px; font-size: 14px; text-align: center; min-width: 100px; margin-top: 10px;\">Order DB</div>\n      </div>\n      <div style=\"background: #28a745; color: white; padding: 8px 15px; border-radius: 20px; font-size: 12px; font-weight: bold; white-space: nowrap;\">GET /users/123</div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; gap: 10px;\">\n        <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px 20px; border-radius: 8px; font-weight: bold; text-align: center; min-width: 120px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">User Service</div>\n        <div style=\"width: 2px; height: 30px; background: #6c757d; margin: 5px 0;\"></div>\n        <div style=\"background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white; padding: 10px 15px; border-radius: 6px; font-size: 14px; text-align: center; min-width: 100px; margin-top: 10px;\">User DB</div>\n      </div>\n    </div>\n    <hr style=\"margin: 20px 0; border: 1px solid #e9ecef;\">\n    <h4>‚ùå Wrong: Direct Database Access</h4>\n    <div style=\"display: flex; justify-content: space-around; align-items: center; margin: 20px 0; flex-wrap: wrap; gap: 20px;\">\n      <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px 20px; border-radius: 8px; font-weight: bold; text-align: center; min-width: 120px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">Order Service</div>\n      <div style=\"background: #dc3545; color: white; padding: 8px 15px; border-radius: 20px; font-size: 12px; font-weight: bold; white-space: nowrap;\">Direct SQL Query</div>\n      <div style=\"background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white; padding: 10px 15px; border-radius: 6px; font-size: 14px; text-align: center; min-width: 100px; margin-top: 10px;\">User DB</div>\n    </div>\n  </div>\n  <div style=\"background: #f8f9fa; padding: 15px; font-family: monospace; border-radius: 6px; margin: 15px 0; border: 1px solid #e9ecef;\">\n    // ‚ùå DON'T: Direct database access<br>\n    User user = userDatabase.findById(userId);<br><br>\n    // ‚úÖ DO: API call to User Service<br>\n    User user = userServiceClient.getUser(userId);<br><br>\n    // ‚úÖ DO: Event-driven updates<br>\n    orderCreated -> inventoryService.reserveItems(order.items)\n  </div>\n</div>\n<div class=\"concept-section\">\n  <h3>When NOT to Separate Databases</h3>\n  <p>Database-per-service isn't always the right choice. Consider keeping shared databases when:</p>\n  <ul>\n    <li><strong>ACID transactions required:</strong> Financial transactions spanning accounts and payments</li>\n    <li><strong>Real-time consistency needed:</strong> Inventory checks during checkout</li>\n    <li><strong>Complex reporting:</strong> Analytics requiring joins across multiple domains</li>\n    <li><strong>Small team/early stage:</strong> Operational complexity outweighs benefits</li>\n    <li><strong>Tightly coupled data:</strong> User profiles and user preferences are rarely independent</li>\n  </ul>\n</div>\n<div class=\"concept-section\">\n  <h3>Evolution Strategy: Gradual Extraction</h3>\n  <p>Most successful implementations start with a monolith and gradually extract services:</p>\n  <ol>\n    <li><strong>Identify bounded contexts</strong> within your monolithic database</li>\n    <li><strong>Extract read-only services first</strong> (less risk, easier rollback)</li>\n    <li><strong>Duplicate data temporarily</strong> during transition periods</li>\n    <li><strong>Implement event-driven synchronization</strong> between old and new systems</li>\n    <li><strong>Cut over gradually</strong> one workflow at a time</li>\n  </ol>\n</div>\n<div class=\"exercise\">\n  <h3>üõ†Ô∏è Design Service Data Boundaries</h3>\n  <p><strong>Scenario:</strong> You're extracting services from a monolithic e-commerce application. The current database contains these main entities:</p>\n  <ul>\n    <li><strong>Users:</strong> profiles, addresses, payment methods, preferences</li>\n    <li><strong>Products:</strong> catalog, descriptions, images, categories, pricing</li>\n    <li><strong>Orders:</strong> order details, line items, shipping info, payment records</li>\n    <li><strong>Reviews:</strong> ratings, comments, helpful votes, moderation flags</li>\n    <li><strong>Inventory:</strong> stock levels, warehouse locations, reorder points</li>\n    <li><strong>Analytics:</strong> page views, conversion tracking, A/B test results</li>\n  </ul>\n  <p><strong>Your task:</strong> Design 4-5 services with clear data ownership. For each service, specify:</p>\n  <ul>\n    <li>What data it owns exclusively</li>\n    <li>What data it needs from other services</li>\n    <li>How it would get that external data (API calls, events, caching)</li>\n  </ul>\n  <p><strong>Consider:</strong> How would you handle the checkout flow that needs user info, product details, inventory levels, and order creation?</p>\n  <p><em>Bonus: Identify one entity that might be harder to assign to a single service and explain why.</em></p>\n</div>"
    },
    {
      "id": 3,
      "title": "Polyglot Persistence: Choosing the Right Database",
      "goals": [
        "Learn to match database technologies to specific use cases and data patterns",
        "Understand the strengths and trade-offs of different database types",
        "Develop a decision framework for database selection in distributed systems"
      ],
      "content": "<div class=\"concept-section\">\n  <h3>The Right Tool for the Right Job</h3>\n  <p>Imagine trying to cut paper with a hammer, or driving screws with a wrench. While it might work, you're fighting against the tool's design. The same principle applies to databases‚Äîusing a relational database for everything is like using only a hammer in your toolbox.</p>\n  <p><strong>Polyglot persistence</strong> means using multiple database technologies within a single application, each optimized for specific data patterns and access requirements.</p>\n</div>\n<div class=\"concept-section\">\n  <h3>Database Types and Their Sweet Spots</h3>\n  <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;\">\n    <div style=\"background: #e8f5e8; padding: 20px; border-radius: 10px;\">\n      <h4>üóÉÔ∏è Relational (SQL)</h4>\n      <p><strong>Best for:</strong> Structured data, complex queries, transactions</p>\n      <ul>\n        <li>‚úÖ ACID compliance</li>\n        <li>‚úÖ Complex joins and aggregations</li>\n        <li>‚úÖ Well-understood and mature</li>\n        <li>‚ùå Horizontal scaling challenges</li>\n      </ul>\n      <p><strong>Examples:</strong> User accounts, financial transactions, order management</p>\n    </div>\n    <div style=\"background: #e3f2fd; padding: 20px; border-radius: 10px;\">\n      <h4>üìÑ Document Stores</h4>\n      <p><strong>Best for:</strong> Semi-structured data, rapid development</p>\n      <ul>\n        <li>‚úÖ Flexible schema</li>\n        <li>‚úÖ Easy horizontal scaling</li>\n        <li>‚úÖ Natural JSON/object mapping</li>\n        <li>‚ùå Limited query capabilities</li>\n      </ul>\n      <p><strong>Examples:</strong> Product catalogs, user preferences, content management</p>\n    </div>\n  </div>\n  <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;\">\n    <div style=\"background: #fff3e0; padding: 20px; border-radius: 10px;\">\n      <h4>üîó Graph Databases</h4>\n      <p><strong>Best for:</strong> Relationship-heavy data, recommendations</p>\n      <ul>\n        <li>‚úÖ Complex relationship queries</li>\n        <li>‚úÖ Real-time recommendations</li>\n        <li>‚úÖ Network analysis</li>\n        <li>‚ùå Learning curve for developers</li>\n      </ul>\n      <p><strong>Examples:</strong> Social networks, fraud detection, recommendation engines</p>\n    </div>\n    <div style=\"background: #f3e5f5; padding: 20px; border-radius: 10px;\">\n      <h4>üìä Time Series</h4>\n      <p><strong>Best for:</strong> Metrics, logs, IoT data</p>\n      <ul>\n        <li>‚úÖ Optimized for time-based queries</li>\n        <li>‚úÖ Automatic data compression</li>\n        <li>‚úÖ Built-in aggregation functions</li>\n        <li>‚ùå Limited to time-series use cases</li>\n      </ul>\n      <p><strong>Examples:</strong> Application metrics, IoT sensors, financial market data</p>\n    </div>\n  </div>\n</div>\n<div class=\"concept-section\">\n  <h3>Real-World Database Selection Examples</h3>\n  <div style=\"background: #fff; border: 2px solid #e9ecef; border-radius: 8px; padding: 20px; margin: 20px 0; text-align: center;\">\n    <h4>E-commerce Platform Architecture</h4>\n    <div style=\"display: flex; justify-content: space-around; align-items: flex-start; margin: 20px 0; flex-wrap: wrap; gap: 15px;\">\n      <div style=\"display: flex; flex-direction: column; align-items: center; gap: 10px; max-width: 150px;\">\n        <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 12px 16px; border-radius: 8px; font-weight: bold; text-align: center; font-size: 14px;\">User Service</div>\n        <div style=\"background: #28a745; color: white; padding: 8px 12px; border-radius: 6px; font-size: 12px; text-align: center;\">PostgreSQL</div>\n        <div style=\"font-size: 12px; text-align: center;\">User profiles, authentication</div>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; gap: 10px; max-width: 150px;\">\n        <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 12px 16px; border-radius: 8px; font-weight: bold; text-align: center; font-size: 14px;\">Product Catalog</div>\n        <div style=\"background: #ff6b35; color: white; padding: 8px 12px; border-radius: 6px; font-size: 12px; text-align: center;\">MongoDB</div>\n        <div style=\"font-size: 12px; text-align: center;\">Flexible product attributes</div>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; gap: 10px; max-width: 150px;\">\n        <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 12px 16px; border-radius: 8px; font-weight: bold; text-align: center; font-size: 14px;\">Recommendations</div>\n        <div style=\"background: #8e44ad; color: white; padding: 8px 12px; border-radius: 6px; font-size: 12px; text-align: center;\">Neo4j</div>\n        <div style=\"font-size: 12px; text-align: center;\">User-product relationships</div>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; gap: 10px; max-width: 150px;\">\n        <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 12px 16px; border-radius: 8px; font-weight: bold; text-align: center; font-size: 14px;\">Analytics</div>\n        <div style=\"background: #e67e22; color: white; padding: 8px 12px; border-radius: 6px; font-size: 12px; text-align: center;\">InfluxDB</div>\n        <div style=\"font-size: 12px; text-align: center;\">Metrics and events</div>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"concept-section\">\n  <h3>Decision Framework: Choosing Your Database</h3>\n  <p>Use this systematic approach to evaluate database choices:</p>\n  <ol>\n    <li><strong>Data Structure:</strong> Is your data highly structured, semi-structured, or unstructured?</li>\n    <li><strong>Query Patterns:</strong> Simple lookups, complex joins, or relationship traversals?</li>\n    <li><strong>Consistency Requirements:</strong> Strong ACID vs eventual consistency acceptable?</li>\n    <li><strong>Scale Characteristics:</strong> Read-heavy, write-heavy, or balanced?</li>\n    <li><strong>Performance Requirements:</strong> Sub-millisecond vs seconds acceptable?</li>\n    <li><strong>Team Expertise:</strong> What databases does your team understand?</li>\n  </ol>\n</div>\n<div class=\"concept-section\">\n  <h3>Common Anti-Patterns to Avoid</h3>\n  <div style=\"background: #ffebee; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n    <h4>üö´ Database Selection Mistakes</h4>\n    <ul>\n      <li><strong>NoSQL for everything:</strong> Using MongoDB for financial transactions requiring ACID</li>\n      <li><strong>Wrong time-series choice:</strong> Using MySQL for high-frequency metrics storage</li>\n      <li><strong>Graph database overuse:</strong> Using Neo4j for simple key-value lookups</li>\n      <li><strong>Premature optimization:</strong> Choosing complex databases before understanding access patterns</li>\n      <li><strong>Technology resume building:</strong> Choosing databases for learning rather than business needs</li>\n    </ul>\n  </div>\n</div>\n<div class=\"concept-section\">\n  <h3>Managing Multiple Databases</h3>\n  <p>Polyglot persistence introduces operational complexity:</p>\n  <ul>\n    <li><strong>Monitoring:</strong> Different metrics and tools for each database type</li>\n    <li><strong>Backup strategies:</strong> Consistent backup timing across different systems</li>\n    <li><strong>Security:</strong> Managing access controls for multiple database types</li>\n    <li><strong>Team expertise:</strong> Training developers on multiple technologies</li>\n    <li><strong>Operational overhead:</strong> More systems to maintain and troubleshoot</li>\n  </ul>\n</div>\n<div class=\"exercise\">\n  <h3>üõ†Ô∏è Database Selection Challenge</h3>\n  <p><strong>Scenario:</strong> You're designing the data layer for a social media platform with these requirements:</p>\n  <ul>\n    <li><strong>User profiles:</strong> 50M users, complex privacy settings, friend relationships</li>\n    <li><strong>Posts and feeds:</strong> 1B posts, real-time feeds, likes/comments</li>\n    <li><strong>Recommendations:</strong> Friend suggestions, content recommendations based on connections</li>\n    <li><strong>Analytics:</strong> Real-time engagement metrics, trending topics</li>\n    <li><strong>Search:</strong> Full-text search across posts and user profiles</li>\n    <li><strong>Messaging:</strong> Direct messages, group chats, message history</li>\n  </ul>\n  <p><strong>Your task:</strong> Choose appropriate databases for each component. For each choice, justify:</p>\n  <ul>\n    <li>Why this database type fits the use case</li>\n    <li>What alternatives you considered and why you rejected them</li>\n    <li>What trade-offs you're accepting</li>\n  </ul>\n  <p><strong>Consider:</strong> How would you handle data that spans multiple databases (e.g., user profiles needed for posts)?</p>\n</div>"
    },
    {
      "id": 4,
      "title": "Data Synchronization Strategies",
      "goals": [
        "Master event-driven data synchronization patterns for distributed systems",
        "Understand Change Data Capture (CDC) and its implementation approaches",
        "Learn to choose between synchronous and asynchronous data synchronization"
      ],
      "content": "<div class=\"concept-section\">\n  <h3>The Data Synchronization Challenge</h3>\n  <p>Once you've distributed your data across multiple services and databases, a new challenge emerges: keeping related data synchronized. Imagine a library system where the main catalog, the reservation system, and the late fees database all need to know when a book is returned. The question isn't just <em>what</em> data to sync, but <em>when</em> and <em>how</em>.</p>\n  <p>Data synchronization in distributed systems involves trade-offs between consistency, performance, and complexity.</p>\n</div>\n<div class=\"concept-section\">\n  <h3>Synchronous vs Asynchronous Synchronization</h3>\n  <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;\">\n    <div style=\"background: #e8f5e8; padding: 20px; border-radius: 10px;\">\n      <h4>Synchronous (Real-time)</h4>\n      <p>Changes propagate immediately as part of the transaction</p>\n      <ul>\n        <li>‚úÖ Strong consistency guarantees</li>\n        <li>‚úÖ Immediate visibility of changes</li>\n        <li>‚ùå Higher latency for operations</li>\n        <li>‚ùå Reduced availability during failures</li>\n      </ul>\n      <p><strong>Use when:</strong> Financial transactions, inventory updates</p>\n    </div>\n    <div style=\"background: #e3f2fd; padding: 20px; border-radius: 10px;\">\n      <h4>Asynchronous (Eventual)</h4>\n      <p>Changes propagate after the initial transaction completes</p>\n      <ul>\n        <li>‚úÖ Higher performance and availability</li>\n        <li>‚úÖ Better fault tolerance</li>\n        <li>‚ùå Temporary inconsistency windows</li>\n        <li>‚ùå More complex error handling</li>\n      </ul>\n      <p><strong>Use when:</strong> User profiles, analytics, search indexes</p>\n    </div>\n  </div>\n</div>\n<div class=\"concept-section\">\n  <h3>Event-Driven Synchronization Patterns</h3>\n  <div style=\"background: #fff; border: 2px solid #e9ecef; border-radius: 8px; padding: 20px; margin: 20px 0;\">\n    <h4>Event Publishing Flow</h4>\n    <div style=\"display: flex; justify-content: space-between; align-items: center; margin: 20px 0; flex-wrap: wrap; gap: 15px;\">\n      <div style=\"display: flex; flex-direction: column; align-items: center; gap: 8px;\">\n        <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 12px 16px; border-radius: 8px; font-weight: bold; text-align: center; font-size: 14px;\">User Service</div>\n        <div style=\"font-size: 12px; text-align: center;\">Creates/Updates User</div>\n      </div>\n      <div style=\"background: #28a745; color: white; padding: 6px 12px; border-radius: 15px; font-size: 11px; font-weight: bold;\">publishes</div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; gap: 8px;\">\n        <div style=\"background: #ffc107; color: #212529; padding: 12px 16px; border-radius: 8px; font-weight: bold; text-align: center; font-size: 14px;\">Event Bus</div>\n        <div style=\"font-size: 12px; text-align: center;\">UserCreated Event</div>\n      </div>\n      <div style=\"background: #28a745; color: white; padding: 6px 12px; border-radius: 15px; font-size: 11px; font-weight: bold;\">consumes</div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; gap: 8px;\">\n        <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 12px 16px; border-radius: 8px; font-weight: bold; text-align: center; font-size: 14px;\">Email Service</div>\n        <div style=\"font-size: 12px; text-align: center;\">Sends Welcome Email</div>\n      </div>\n    </div>\n    <div style=\"display: flex; justify-content: center; margin-top: 15px;\">\n      <div style=\"background: #28a745; color: white; padding: 6px 12px; border-radius: 15px; font-size: 11px; font-weight: bold;\">also consumes</div>\n    </div>\n    <div style=\"display: flex; justify-content: space-around; margin-top: 10px; flex-wrap: wrap; gap: 15px;\">\n      <div style=\"display: flex; flex-direction: column; align-items: center; gap: 8px;\">\n        <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 12px 16px; border-radius: 8px; font-weight: bold; text-align: center; font-size: 14px;\">Analytics Service</div>\n        <div style=\"font-size: 12px; text-align: center;\">Updates Metrics</div>\n      </div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; gap: 8px;\">\n        <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 12px 16px; border-radius: 8px; font-weight: bold; text-align: center; font-size: 14px;\">Search Service</div>\n        <div style=\"font-size: 12px; text-align: center;\">Indexes User Profile</div>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"concept-section\">\n  <h3>Change Data Capture (CDC)</h3>\n  <p>CDC monitors database changes and automatically publishes events without modifying application code:</p>\n  <ul>\n    <li><strong>Database log monitoring:</strong> Reads transaction logs (MySQL binlog, PostgreSQL WAL)</li>\n    <li><strong>Trigger-based CDC:</strong> Database triggers fire on data changes</li>\n    <li><strong>Polling-based CDC:</strong> Periodic queries for changed records</li>\n  </ul>\n  <div style=\"background: #f8f9fa; padding: 15px; font-family: monospace; border-radius: 6px; margin: 15px 0; border: 1px solid #e9ecef;\">\n    // Example: CDC with Debezium capturing PostgreSQL changes<br>\n    {\n      \"before\": null,<br>\n      \"after\": {<br>\n        \"id\": 123,<br>\n        \"email\": \"user@example.com\",<br>\n        \"name\": \"John Doe\"<br>\n      },<br>\n      \"op\": \"c\", // create operation<br>\n      \"ts_ms\": 1625097600000<br>\n    }\n  </div>\n</div>\n<div class=\"concept-section\">\n  <h3>Handling Synchronization Failures</h3>\n  <p>Distributed systems must gracefully handle synchronization failures:</p>\n  <ul>\n    <li><strong>Retry mechanisms:</strong> Exponential backoff with jitter</li>\n    <li><strong>Dead letter queues:</strong> Store failed events for later processing</li>\n    <li><strong>Idempotency:</strong> Ensure duplicate events don't cause problems</li>\n    <li><strong>Circuit breakers:</strong> Stop trying when downstream services are down</li>\n    <li><strong>Compensating actions:</strong> Undo changes when synchronization fails</li>\n  </ul>\n</div>\n<div class=\"concept-section\">\n  <h3>Consistency Patterns for Synchronization</h3>\n  <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;\">\n    <div style=\"background: #fff3e0; padding: 20px; border-radius: 10px;\">\n      <h4>Eventual Consistency</h4>\n      <ul>\n        <li>‚úÖ High performance and availability</li>\n        <li>‚úÖ Natural fit for event-driven architectures</li>\n        <li>‚ùå Temporary inconsistencies visible to users</li>\n        <li>‚ùå Complex conflict resolution</li>\n      </ul>\n    </div>\n    <div style=\"background: #f3e5f5; padding: 20px; border-radius: 10px;\">\n      <h4>Strong Consistency</h4>\n      <ul>\n        <li>‚úÖ No inconsistencies visible to users</li>\n        <li>‚úÖ Simpler application logic</li>\n        <li>‚ùå Lower performance and availability</li>\n        <li>‚ùå Blocking during network partitions</li>\n      </ul>\n    </div>\n  </div>\n</div>\n<div class=\"exercise\">\n  <h3>üõ†Ô∏è Design a Synchronization Strategy</h3>\n  <p><strong>Scenario:</strong> Your e-commerce platform needs to keep these systems synchronized:</p>\n  <ul>\n    <li><strong>User Service:</strong> User profiles and preferences</li>\n    <li><strong>Order Service:</strong> Order history and status</li>\n    <li><strong>Inventory Service:</strong> Stock levels and reservations</li>\n    <li><strong>Email Service:</strong> Notification preferences and delivery history</li>\n    <li><strong>Analytics Service:</strong> User behavior and purchase patterns</li>\n    <li><strong>Search Service:</strong> Product and user search indexes</li>\n  </ul>\n  <p><strong>Key workflows to synchronize:</strong></p>\n  <ol>\n    <li>User registration ‚Üí Update search index, send welcome email, initialize analytics</li>\n    <li>Order placement ‚Üí Reserve inventory, send confirmation email, update analytics</li>\n    <li>Inventory restock ‚Üí Update search results, notify waiting customers</li>\n  </ol>\n  <p><strong>Your task:</strong> Design a synchronization strategy that addresses:</p>\n  <ul>\n    <li>Which synchronizations should be synchronous vs asynchronous</li>\n    <li>How you'll handle failures in each workflow</li>\n    <li>What consistency guarantees you'll provide for each use case</li>\n    <li>How you'll monitor and debug synchronization issues</li>\n  </ul>\n  <p><strong>Consider:</strong> What happens if the email service is down during user registration? How do you ensure inventory is never oversold?</p>\n</div>"
    },
    {
      "id": 5,
      "title": "Real-World Data Architecture Evolution",
      "goals": [
        "Learn from real-world data architecture transformations at companies like Airbnb, Uber, and Shopify",
        "Understand migration strategies and lessons learned from large-scale data architecture changes",
        "Develop practical approaches for evolving data architecture in existing systems"
      ],
      "content": "<div class=\"concept-section\">\n  <h3>Real-World Architecture Evolution</h3>\n  <p>The most valuable lessons in data architecture come from companies that have scaled from startup monoliths to distributed systems serving millions of users. Let's examine how major companies approached their data architecture evolution and the lessons they learned.</p>\n</div>\n<div class=\"concept-section\">\n  <h3>Airbnb: From Monolith to Service-Oriented Architecture</h3>\n  <p>Airbnb's journey illustrates the challenges of evolving data architecture while maintaining business continuity:</p>\n  <ul>\n    <li><strong>2008-2012:</strong> Rails monolith with MySQL, everything in one database</li>\n    <li><strong>2013-2015:</strong> Service-oriented architecture, still shared databases</li>\n    <li><strong>2016-2018:</strong> Microservices with dedicated data stores</li>\n    <li><strong>2019+:</strong> Event-driven architecture with Apache Kafka</li>\n  </ul>\n  <p><strong>Key lessons learned:</strong></p>\n  <ul>\n    <li><strong>Start with business boundaries:</strong> Separate payments, messaging, and bookings first</li>\n    <li><strong>Gradual migration works:</strong> Extracted one domain at a time over 3+ years</li>\n    <li><strong>Operational complexity grows:</strong> Went from 1 database to 100+ data stores</li>\n    <li><strong>Event sourcing helps:</strong> Kafka enabled real-time synchronization between services</li>\n  </ul>\n</div>\n<div class=\"concept-section\">\n  <h3>Uber: Scaling Ride-Sharing Data</h3>\n  <p>Uber's growth from thousands to millions of rides daily drove unique data architecture decisions:</p>\n  <ul>\n    <li><strong>Geospatial challenges:</strong> Real-time location tracking for millions of drivers</li>\n    <li><strong>High-throughput writes:</strong> GPS coordinates updated every few seconds</li>\n    <li><strong>Low-latency reads:</strong> Finding nearby drivers in under 100ms</li>\n    <li><strong>Global expansion:</strong> Data sovereignty and latency requirements across continents</li>\n  </ul>\n  <p><strong>Technical solutions:</strong></p>\n  <ul>\n    <li><strong>Cassandra for geospatial data:</strong> Handles massive write volumes with geographic partitioning</li>\n    <li><strong>Redis for real-time matching:</strong> Driver locations cached for sub-second lookups</li>\n    <li><strong>Kafka for event streaming:</strong> Trip events, location updates, pricing changes</li>\n    <li><strong>Separate databases per geography:</strong> EU data stays in EU, reducing latency</li>\n  </ul>\n</div>\n<div class=\"concept-section\">\n  <h3>Shopify: Multi-Tenant Data Architecture</h3>\n  <p>Shopify's challenge: serve millions of merchants while maintaining data isolation and performance:</p>\n  <div style=\"background: #fff; border: 2px solid #e9ecef; border-radius: 8px; padding: 20px; margin: 20px 0;\">\n    <h4>Shopify's Sharding Evolution</h4>\n    <div style=\"display: flex; justify-content: space-between; align-items: center; margin: 20px 0; flex-wrap: wrap; gap: 15px;\">\n      <div style=\"display: flex; flex-direction: column; align-items: center; gap: 8px;\">\n        <div style=\"background: #ffc107; color: #212529; padding: 12px; border-radius: 8px; font-weight: bold; text-align: center; font-size: 12px;\">Phase 1: Single DB</div>\n        <div style=\"font-size: 11px; text-align: center;\">All merchants<br>shared tables</div>\n      </div>\n      <div style=\"font-size: 20px; color: #6c757d;\">‚Üí</div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; gap: 8px;\">\n        <div style=\"background: #28a745; color: white; padding: 12px; border-radius: 8px; font-weight: bold; text-align: center; font-size: 12px;\">Phase 2: Shop-based Sharding</div>\n        <div style=\"font-size: 11px; text-align: center;\">Merchants grouped<br>by shop_id</div>\n      </div>\n      <div style=\"font-size: 20px; color: #6c757d;\">‚Üí</div>\n      <div style=\"display: flex; flex-direction: column; align-items: center; gap: 8px;\">\n        <div style=\"background: #007bff; color: white; padding: 12px; border-radius: 8px; font-weight: bold; text-align: center; font-size: 12px;\">Phase 3: Service Extraction</div>\n        <div style=\"font-size: 11px; text-align: center;\">Payments, inventory,<br>orders separated</div>\n      </div>\n    </div>\n  </div>\n  <p><strong>Shopify's key insights:</strong></p>\n  <ul>\n    <li><strong>Tenant-based sharding works:</strong> Each shop's data naturally partitions</li>\n    <li><strong>Some shops outgrow shards:</strong> Large merchants moved to dedicated infrastructure</li>\n    <li><strong>Cross-shop features are hard:</strong> Platform-wide analytics required special handling</li>\n    <li><strong>Gradual extraction succeeded:</strong> Extracted payments service first (lowest risk)</li>\n  </ul>\n  <p><a href=\"https://shopify.engineering/lessons-learned-from-running-apache-kafka-at-scale\" target=\"_blank\" rel=\"noopener noreferrer\">Shopify Engineering: Running Apache Kafka at Scale</a></p>\n  <p><a href=\"https://shopify.engineering/refactoring-legacy-code-strangler-fig-pattern\" target=\"_blank\" rel=\"noopener noreferrer\">Shopify Engineering: Refactoring with Strangler Fig Pattern</a></p>\n</div>\n<div class=\"concept-section\">\n  <h3>Common Migration Patterns and Strategies</h3>\n  <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;\">\n    <div style=\"background: #e8f5e8; padding: 20px; border-radius: 10px;\">\n      <h4>Strangler Fig Pattern</h4>\n      <ul>\n        <li>‚úÖ Gradual replacement of monolith</li>\n        <li>‚úÖ Reduced risk of big-bang failures</li>\n        <li>‚úÖ Business continues during migration</li>\n        <li>‚ùå Temporary complexity and duplication</li>\n      </ul>\n      <p><strong>Best for:</strong> Large, critical systems</p>\n    </div>\n    <div style=\"background: #e3f2fd; padding: 20px; border-radius: 10px;\">\n      <h4>Database Replication</h4>\n      <ul>\n        <li>‚úÖ Zero-downtime data migration</li>\n        <li>‚úÖ Easy rollback if issues arise</li>\n        <li>‚úÖ Validate new system with real data</li>\n        <li>‚ùå Double storage costs during migration</li>\n      </ul>\n      <p><strong>Best for:</strong> Read-heavy systems</p>\n    </div>\n  </div>\n</div>\n<div class=\"concept-section\">\n  <h3>Lessons Learned: What Works and What Doesn't</h3>\n  <div style=\"background: #e8f5e8; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n    <h4>‚úÖ Successful Strategies</h4>\n    <ul>\n      <li><strong>Start with clear business domains:</strong> Payments, users, and orders are natural boundaries</li>\n      <li><strong>Extract read-only services first:</strong> Lower risk, easier to roll back</li>\n      <li><strong>Invest in observability early:</strong> Monitor everything during migration</li>\n      <li><strong>Feature flags for gradual rollout:</strong> Route percentage of traffic to new services</li>\n      <li><strong>Dual-write during transitions:</strong> Write to both old and new systems temporarily</li>\n    </ul>\n  </div>\n  <div style=\"background: #ffebee; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n    <h4>‚ùå Common Mistakes</h4>\n    <ul>\n      <li><strong>Big-bang migrations:</strong> Attempting to migrate everything at once</li>\n      <li><strong>Ignoring data migration complexity:</strong> Underestimating time needed for data consistency</li>\n      <li><strong>Premature optimization:</strong> Choosing complex architectures before proving need</li>\n      <li><strong>Insufficient testing:</strong> Not validating new systems with production load</li>\n      <li><strong>Neglecting team training:</strong> Teams unprepared for operational complexity</li>\n    </ul>\n  </div>\n</div>\n<div class=\"concept-section\">\n  <h3>Migration Timeline and Resource Planning</h3>\n  <p>Based on real-world experiences, typical migration timelines:</p>\n  <ul>\n    <li><strong>Small service extraction (1-2 domains):</strong> 3-6 months</li>\n    <li><strong>Medium migration (5-10 services):</strong> 1-2 years</li>\n    <li><strong>Large transformation (20+ services):</strong> 2-4 years</li>\n    <li><strong>Team allocation:</strong> Expect 30-50% of engineering time during active migration</li>\n  </ul>\n</div>\n<div class=\"exercise\">\n  <h3>üõ†Ô∏è Plan Your Migration Strategy</h3>\n  <p><strong>Scenario:</strong> You're the lead architect for a 5-year-old fintech company. Your current system:</p>\n  <ul>\n    <li><strong>Rails monolith</strong> with 500K lines of code</li>\n    <li><strong>PostgreSQL database</strong> with 200+ tables, 2TB data</li>\n    <li><strong>50 engineers</strong> across 6 teams</li>\n    <li><strong>1M active users</strong> processing $100M/month in transactions</li>\n    <li><strong>Current pain points:</strong> Slow deployments, database contention, team coordination issues</li>\n  </ul>\n  <p><strong>Business domains in your monolith:</strong></p>\n  <ul>\n    <li><strong>User management:</strong> Authentication, profiles, KYC verification</li>\n    <li><strong>Account services:</strong> Bank account linking, balance management</li>\n    <li><strong>Payment processing:</strong> Transaction execution, fee calculation</li>\n    <li><strong>Risk and compliance:</strong> Fraud detection, regulatory reporting</li>\n    <li><strong>Customer support:</strong> Ticket management, user communication</li>\n  </ul>\n  <p><strong>Your task:</strong> Design a 2-year migration strategy that includes:</p>\n  <ol>\n    <li><strong>Service extraction order:</strong> Which domains to extract first and why</li>\n    <li><strong>Data migration approach:</strong> How to handle the 2TB database</li>\n    <li><strong>Risk mitigation:</strong> How to ensure financial transactions remain reliable</li>\n    <li><strong>Team coordination:</strong> How to manage 50 engineers during the transition</li>\n    <li><strong>Success metrics:</strong> How you'll measure migration progress and success</li>\n  </ol>\n  <p><strong>Consider:</strong> Which domain would be most dangerous to extract first? How would you handle the shared user authentication across all services?</p>\n</div>\n<div class=\"concept-section\">\n  <h3>üéâ Data Architecture Patterns Mastery Complete!</h3>\n  <p>You've now mastered:</p>\n  <ul>\n    <li>‚úÖ Understanding when and why distributed data architecture becomes necessary</li>\n    <li>‚úÖ Implementing database-per-service patterns with proper boundaries</li>\n    <li>‚úÖ Choosing the right database technologies for specific use cases</li>\n    <li>‚úÖ Designing data synchronization strategies for distributed systems</li>\n    <li>‚úÖ Learning from real-world architecture evolution and migration strategies</li>\n  </ul>\n  <p><strong>Next steps:</strong> Apply these patterns to your current systems, practice with small-scale extractions, or dive deeper into advanced topics like event sourcing, CQRS, and distributed transaction patterns.</p>\n</div>"
    },
    {
      "id": 6,
      "title": "Data Architecture Patterns Knowledge Check",
      "goals": [
        "Test your understanding of data architecture fundamentals and distributed system challenges",
        "Evaluate your knowledge of database selection and synchronization strategies",
        "Assess your grasp of real-world migration approaches and lessons learned"
      ],
      "content": "<div class=\"concept-section\">\n  <h3>üß† Test Your Data Architecture Mastery</h3>\n  <p>Time to put your knowledge to the test! This quiz covers key concepts from all 5 lessons. Select all correct answers for each question, then click \"Reveal Answers\" to see how you did.</p>\n  <p><strong>Instructions:</strong> Multiple answers may be correct for each question. Check all that apply!</p>\n</div>\n\n<div class=\"quiz-container\" style=\"margin: 20px 0;\">\n  <div class=\"quiz-question\" style=\"background: #f8f9fa; padding: 20px; margin: 15px 0; border-radius: 10px; border-left: 4px solid #007bff;\">\n    <h4>Question 1: Shared Database Problems (Lesson 1)</h4>\n    <p><strong>Which issues are caused by multiple services sharing a single database?</strong></p>\n    <div class=\"quiz-options\">\n      <label><input type=\"checkbox\" data-question=\"1\" data-correct=\"true\"> Schema changes require coordinating all services</label><br>\n      <label><input type=\"checkbox\" data-question=\"1\" data-correct=\"false\"> Individual services run out of memory</label><br>\n      <label><input type=\"checkbox\" data-question=\"1\" data-correct=\"true\"> Technology lock-in prevents using different database types</label><br>\n      <label><input type=\"checkbox\" data-question=\"1\" data-correct=\"true\"> Database issues affect all services simultaneously</label><br>\n      <label><input type=\"checkbox\" data-question=\"1\" data-correct=\"false\"> Services cannot communicate with each other</label>\n    </div>\n  </div>\n\n  <div class=\"quiz-question\" style=\"background: #f8f9fa; padding: 20px; margin: 15px 0; border-radius: 10px; border-left: 4px solid #28a745;\">\n    <h4>Question 2: CAP Theorem Application (Lesson 1)</h4>\n    <p><strong>According to the CAP theorem, what trade-offs must distributed systems make?</strong></p>\n    <div class=\"quiz-options\">\n      <label><input type=\"checkbox\" data-question=\"2\" data-correct=\"true\"> Partition tolerance is non-negotiable in distributed systems</label><br>\n      <label><input type=\"checkbox\" data-question=\"2\" data-correct=\"false\"> You can achieve all three properties (C, A, P) simultaneously</label><br>\n      <label><input type=\"checkbox\" data-question=\"2\" data-correct=\"true\"> You must choose between consistency and availability during network partitions</label><br>\n      <label><input type=\"checkbox\" data-question=\"2\" data-correct=\"true\"> Financial systems typically choose consistency over availability</label><br>\n      <label><input type=\"checkbox\" data-question=\"2\" data-correct=\"false\"> Availability is always more important than consistency</label>\n    </div>\n  </div>\n\n  <div class=\"quiz-question\" style=\"background: #f8f9fa; padding: 20px; margin: 15px 0; border-radius: 10px; border-left: 4px solid #ffc107;\">\n    <h4>Question 3: Database-per-Service Benefits (Lesson 2)</h4>\n    <p><strong>What are the main benefits of the database-per-service pattern?</strong></p>\n    <div class=\"quiz-options\">\n      <label><input type=\"checkbox\" data-question=\"3\" data-correct=\"true\"> Services can choose different database technologies</label><br>\n      <label><input type=\"checkbox\" data-question=\"3\" data-correct=\"false\"> All services automatically scale together</label><br>\n      <label><input type=\"checkbox\" data-question=\"3\" data-correct=\"true\"> Schema changes don't require cross-service coordination</label><br>\n      <label><input type=\"checkbox\" data-question=\"3\" data-correct=\"true\"> Failure isolation prevents cascade failures</label><br>\n      <label><input type=\"checkbox\" data-question=\"3\" data-correct=\"false\"> Cross-service queries become faster and simpler</label>\n    </div>\n  </div>\n\n  <div class=\"quiz-question\" style=\"background: #f8f9fa; padding: 20px; margin: 15px 0; border-radius: 10px; border-left: 4px solid #dc3545;\">\n    <h4>Question 4: Database Selection (Lesson 3)</h4>\n    <p><strong>When should you choose each database type for optimal performance?</strong></p>\n    <div class=\"quiz-options\">\n      <label><input type=\"checkbox\" data-question=\"4\" data-correct=\"true\"> Graph databases for recommendation engines and social networks</label><br>\n      <label><input type=\"checkbox\" data-question=\"4\" data-correct=\"false\"> Document stores for financial transactions requiring ACID</label><br>\n      <label><input type=\"checkbox\" data-question=\"4\" data-correct=\"true\"> Time-series databases for IoT sensor data and metrics</label><br>\n      <label><input type=\"checkbox\" data-question=\"4\" data-correct=\"true\"> Relational databases for complex queries and transactions</label><br>\n      <label><input type=\"checkbox\" data-question=\"4\" data-correct=\"false\"> Key-value stores for complex reporting and analytics</label>\n    </div>\n  </div>\n\n  <div class=\"quiz-question\" style=\"background: #f8f9fa; padding: 20px; margin: 15px 0; border-radius: 10px; border-left: 4px solid #6f42c1;\">\n    <h4>Question 5: Synchronous vs Asynchronous Synchronization (Lesson 4)</h4>\n    <p><strong>When should you use synchronous vs asynchronous data synchronization?</strong></p>\n    <div class=\"quiz-options\">\n      <label><input type=\"checkbox\" data-question=\"5\" data-correct=\"true\"> Synchronous for financial transactions and inventory updates</label><br>\n      <label><input type=\"checkbox\" data-question=\"5\" data-correct=\"false\"> Asynchronous for all database operations to maximize performance</label><br>\n      <label><input type=\"checkbox\" data-question=\"5\" data-correct=\"true\"> Asynchronous for user profiles and search index updates</label><br>\n      <label><input type=\"checkbox\" data-question=\"5\" data-correct=\"true\"> Synchronous when strong consistency is required</label><br>\n      <label><input type=\"checkbox\" data-question=\"5\" data-correct=\"false\"> Synchronous for analytics and reporting systems</label>\n    </div>\n  </div>\n\n  <div class=\"quiz-question\" style=\"background: #f8f9fa; padding: 20px; margin: 15px 0; border-radius: 10px; border-left: 4px solid #20c997;\">\n    <h4>Question 6: Change Data Capture (CDC) (Lesson 4)</h4>\n    <p><strong>What are the advantages of using Change Data Capture for data synchronization?</strong></p>\n    <div class=\"quiz-options\">\n      <label><input type=\"checkbox\" data-question=\"6\" data-correct=\"true\"> Monitors database changes without modifying application code</label><br>\n      <label><input type=\"checkbox\" data-question=\"6\" data-correct=\"false\"> Guarantees zero data loss in all failure scenarios</label><br>\n      <label><input type=\"checkbox\" data-question=\"6\" data-correct=\"true\"> Can capture changes from database transaction logs</label><br>\n      <label><input type=\"checkbox\" data-question=\"6\" data-correct=\"true\"> Provides near real-time data synchronization</label><br>\n      <label><input type=\"checkbox\" data-question=\"6\" data-correct=\"false\"> Eliminates the need for event-driven architecture</label>\n    </div>\n  </div>\n\n  <div class=\"quiz-question\" style=\"background: #f8f9fa; padding: 20px; margin: 15px 0; border-radius: 10px; border-left: 4px solid #fd7e14;\">\n    <h4>Question 7: Real-World Migration Lessons (Lesson 5)</h4>\n    <p><strong>What strategies proved successful in real-world data architecture migrations?</strong></p>\n    <div class=\"quiz-options\">\n      <label><input type=\"checkbox\" data-question=\"7\" data-correct=\"true\"> Extract read-only services first to reduce risk</label><br>\n      <label><input type=\"checkbox\" data-question=\"7\" data-correct=\"false\"> Always use big-bang migrations for faster completion</label><br>\n      <label><input type=\"checkbox\" data-question=\"7\" data-correct=\"true\"> Start with clear business domain boundaries</label><br>\n      <label><input type=\"checkbox\" data-question=\"7\" data-correct=\"true\"> Use feature flags for gradual traffic routing</label><br>\n      <label><input type=\"checkbox\" data-question=\"7\" data-correct=\"false\"> Migrate all databases simultaneously to avoid complexity</label>\n    </div>\n  </div>\n\n  <div class=\"quiz-question\" style=\"background: #f8f9fa; padding: 20px; margin: 15px 0; border-radius: 10px; border-left: 4px solid #e83e8c;\">\n    <h4>Question 8: Migration Anti-Patterns (Lesson 5)</h4>\n    <p><strong>Which approaches should be avoided during data architecture migrations?</strong></p>\n    <div class=\"quiz-options\">\n      <label><input type=\"checkbox\" data-question=\"8\" data-correct=\"true\"> Big-bang migrations attempting to change everything at once</label><br>\n      <label><input type=\"checkbox\" data-question=\"8\" data-correct=\"false\"> Gradual rollout with careful monitoring</label><br>\n      <label><input type=\"checkbox\" data-question=\"8\" data-correct=\"true\"> Choosing complex architectures before proving the need</label><br>\n      <label><input type=\"checkbox\" data-question=\"8\" data-correct=\"true\"> Underestimating data migration complexity and timelines</label><br>\n      <label><input type=\"checkbox\" data-question=\"8\" data-correct=\"false\"> Investing in observability and monitoring tools</label>\n    </div>\n  </div>\n\n  <div style=\"text-align: center; margin: 30px 0;\">\n    <button id=\"revealBtn\" onclick=\"revealAnswers()\" style=\"background: #007bff; color: white; padding: 15px 30px; border: none; border-radius: 5px; font-size: 16px; cursor: pointer; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">üéØ Reveal Answers & Show Score</button>\n  </div>\n\n  <div id=\"results\" style=\"display: none; background: #e8f5e8; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n    <h3>üìä Your Results</h3>\n    <div id=\"score-display\"></div>\n    <div id=\"feedback\"></div>\n    <br>\n    <button onclick=\"retakeQuiz()\" style=\"background: #28a745; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer;\">üîÑ Retake Quiz</button>\n  </div>\n</div>\n\n<script>\nfunction revealAnswers() {\n  const questions = document.querySelectorAll('.quiz-question');\n  let totalQuestions = questions.length;\n  let correctAnswers = 0;\n  let totalPossiblePoints = 0;\n  let earnedPoints = 0;\n\n  questions.forEach((question, questionIndex) => {\n    const questionNum = questionIndex + 1;\n    const checkboxes = question.querySelectorAll('input[type=\"checkbox\"]');\n    const correctCheckboxes = question.querySelectorAll('input[data-correct=\"true\"]');\n    const incorrectCheckboxes = question.querySelectorAll('input[data-correct=\"false\"]');\n    \n    totalPossiblePoints += correctCheckboxes.length;\n    \n    let questionCorrect = true;\n    let questionPoints = 0;\n    \n    checkboxes.forEach(checkbox => {\n      const isChecked = checkbox.checked;\n      const isCorrect = checkbox.getAttribute('data-correct') === 'true';\n      \n      if (isChecked && isCorrect) {\n        checkbox.parentElement.style.backgroundColor = '#d4edda';\n        checkbox.parentElement.style.color = '#155724';\n        questionPoints++;\n      } else if (isChecked && !isCorrect) {\n        checkbox.parentElement.style.backgroundColor = '#f8d7da';\n        checkbox.parentElement.style.color = '#721c24';\n        questionCorrect = false;\n      } else if (!isChecked && isCorrect) {\n        checkbox.parentElement.style.backgroundColor = '#fff3cd';\n        checkbox.parentElement.style.color = '#856404';\n        questionCorrect = false;\n      }\n      \n      checkbox.disabled = true;\n    });\n    \n    earnedPoints += questionPoints;\n    if (questionCorrect) correctAnswers++;\n  });\n\n  const percentage = Math.round((earnedPoints / totalPossiblePoints) * 100);\n  \n  document.getElementById('score-display').innerHTML = `\n    <p><strong>Score: ${earnedPoints}/${totalPossiblePoints} points (${percentage}%)</strong></p>\n    <p>Perfect questions: ${correctAnswers}/${totalQuestions}</p>\n  `;\n  \n  let feedback = '';\n  if (percentage >= 90) {\n    feedback = 'üéâ Excellent! You have mastered data architecture patterns.';\n  } else if (percentage >= 75) {\n    feedback = 'üëç Good job! You understand most key concepts.';\n  } else if (percentage >= 60) {\n    feedback = 'üìö Not bad, but consider reviewing the lessons for better understanding.';\n  } else {\n    feedback = 'üí™ Keep studying! Review the lessons and try again.';\n  }\n  \n  document.getElementById('feedback').innerHTML = `<p>${feedback}</p>`;\n  document.getElementById('results').style.display = 'block';\n  document.getElementById('revealBtn').style.display = 'none';\n}\n\nfunction retakeQuiz() {\n  const checkboxes = document.querySelectorAll('input[type=\"checkbox\"]');\n  checkboxes.forEach(checkbox => {\n    checkbox.checked = false;\n    checkbox.disabled = false;\n    checkbox.parentElement.style.backgroundColor = '';\n    checkbox.parentElement.style.color = '';\n  });\n  \n  document.getElementById('results').style.display = 'none';\n  document.getElementById('revealBtn').style.display = 'inline-block';\n}\n</script>\n\n<div class=\"concept-section\" style=\"margin-top: 40px;\">\n  <h3>üéâ Data Architecture Patterns Journey Complete!</h3>\n  <p>Congratulations! You've completed the comprehensive Data Architecture Patterns learning journey. You now have the knowledge to:</p>\n  <ul>\n    <li>‚úÖ Identify when monolithic database approaches become bottlenecks</li>\n    <li>‚úÖ Design database-per-service architectures with proper boundaries</li>\n    <li>‚úÖ Choose the right database technologies for specific use cases</li>\n    <li>‚úÖ Implement effective data synchronization strategies</li>\n    <li>‚úÖ Plan and execute data architecture migrations based on real-world lessons</li>\n  </ul>\n  <p><strong>Next steps:</strong> Apply these patterns to your current projects, practice extracting services from monoliths, or explore advanced topics like event sourcing, CQRS, and distributed consensus algorithms.</p>\n</div>"
    }
  ]
}