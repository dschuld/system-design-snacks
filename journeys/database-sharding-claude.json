{
  "id": "database-sharding",
 "title": "Database Sharding",
    "totalLessons": 6,
    "available": true,
    "lessons": [
      {
        "id": 1,
        "title": "Why Do Databases Need Sharding?",
        "goals": [
          "Identify the scaling limits that force database sharding decisions",
          "Understand the difference between read scaling and write scaling challenges", 
          "Recognize when vertical scaling becomes economically unfeasible"
        ],
        "content": "<div class=\"concept-section\">\n  <h3>The Scaling Wall Every Database Hits</h3>\n  <p>Imagine a library that starts with one room and 1,000 books. As popularity grows, you add more books, then more shelves, then expand the room. Eventually, you face a fundamental problem: no matter how large you make the single room, there's only one librarian who can check out books. This is the <strong>write scaling bottleneck</strong> that forces database sharding.</p>\n  <p>Sharding means splitting your data across multiple database instances, each handling a subset of your total data. Unlike read replicas (which only help with read traffic), sharding distributes both reads <em>and writes</em> across multiple databases.</p>\n</div>\n<div class=\"concept-section\">\n  <h3>The Scaling Challenges That Drive Sharding</h3>\n  <ul>\n    <li><strong>Write throughput limits:</strong> Single database can only handle ~10K-50K writes/second depending on complexity</li>\n    <li><strong>Storage size limits:</strong> Multi-terabyte databases become slow for maintenance, backups, and recovery</li>\n    <li><strong>Memory pressure:</strong> Working set no longer fits in RAM, causing disk I/O bottlenecks</li>\n    <li><strong>Connection limits:</strong> Database servers typically max out at 1K-10K concurrent connections</li>\n    <li><strong>Economic efficiency:</strong> Vertical scaling costs grow exponentially (16-core ‚Üí 32-core isn't 2x the price)</li>\n  </ul>\n</div>\n<div class=\"concept-section\">\n  <h3>Read Scaling vs Write Scaling</h3>\n  <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;\">\n    <div style=\"background: #e8f5e8; padding: 20px; border-radius: 10px;\">\n      <h4>Read Scaling (Easier)</h4>\n      <ul>\n        <li>‚úÖ Read replicas distribute load</li>\n        <li>‚úÖ Caching reduces database hits</li>\n        <li>‚úÖ CDNs handle static content</li>\n        <li>‚ö†Ô∏è Eventually hits replica lag limits</li>\n      </ul>\n    </div>\n    <div style=\"background: #fff3e0; padding: 20px; border-radius: 10px;\">\n      <h4>Write Scaling (Harder)</h4>\n      <ul>\n        <li>‚ö†Ô∏è All writes go to primary database</li>\n        <li>‚ö†Ô∏è Transactions require ACID guarantees</li>\n        <li>‚ö†Ô∏è Schema changes affect entire dataset</li>\n        <li>üî• <strong>This is where sharding becomes necessary</strong></li>\n      </ul>\n    </div>\n  </div>\n</div>\n<div class=\"concept-section\">\n  <h3>Warning Signs You Need Sharding</h3>\n  <ul>\n    <li>Database CPU consistently above 70% despite optimization</li>\n    <li>Write queries experiencing increasing latency during peak hours</li>\n    <li>Connection pooling can't keep up with application demand</li>\n    <li>Backup and recovery operations taking hours and affecting performance</li>\n    <li>Next server upgrade would cost 3x current infrastructure budget</li>\n  </ul>\n</div>\n<div class=\"exercise\">\n  <h3>üõ†Ô∏è Recognize the Sharding Trigger</h3>\n  <p><strong>Scenario:</strong> Your social media platform has 10M users. The main database handles user profiles, posts, and friendships. Currently running on a 32-core server with 256GB RAM, processing 25K writes/second during peak hours.</p>\n  <p><strong>Your task:</strong> List three specific metrics you would monitor to determine when sharding becomes necessary. For each metric, specify the threshold that would trigger a sharding project.</p>\n  <p><strong>Consider:</strong> What happens when you hit 50M users? How would user growth affect each of your chosen metrics?</p>\n  <p><em>Bonus: Calculate the approximate data growth rate and estimate when storage becomes a limiting factor.</em></p>\n</div>"
      },
      {
        "id": 2,
        "title": "Horizontal vs Vertical Sharding Strategies",
        "goals": [
          "Compare horizontal sharding (splitting rows) with vertical sharding (splitting columns)",
          "Identify which sharding strategy fits different application patterns",
          "Understand the complexity trade-offs between sharding approaches"
        ],
        "content": "<div class=\"concept-section\">\n  <h3>Two Fundamental Approaches to Splitting Data</h3>\n  <p>When your single database becomes the bottleneck, you have two primary strategies for dividing the load. Think of a massive spreadsheet that's become unwieldy‚Äîyou can either <strong>split it into multiple sheets with fewer rows each</strong> (horizontal sharding) or <strong>split columns across different sheets</strong> (vertical sharding).</p>\n</div>\n<div class=\"concept-section\">\n  <h3>Horizontal Sharding: Splitting Rows</h3>\n  <p>Horizontal sharding distributes rows of the same table across multiple database instances. Each shard contains the same schema but different subsets of data.</p>\n  <ul>\n    <li>‚úÖ <strong>Write scaling:</strong> Distributes both reads and writes across shards</li>\n    <li>‚úÖ <strong>Even distribution:</strong> Can balance load if sharding key is well-chosen</li>\n    <li>‚úÖ <strong>Independent scaling:</strong> Add more shards as data grows</li>\n    <li>‚ùå <strong>Cross-shard queries:</strong> Joining data across shards is complex and slow</li>\n    <li>‚ùå <strong>Rebalancing:</strong> Adding new shards may require data migration</li>\n  </ul>\n  <p><strong>Example:</strong> User table sharded by user_id‚Äîusers 1-1M on shard1, users 1M-2M on shard2, etc.</p>\n</div>\n<div class=\"concept-section\">\n  <h3>Vertical Sharding: Splitting Columns</h3>\n  <p>Vertical sharding moves different tables or groups of columns to separate databases, typically organized by feature or access patterns.</p>\n  <ul>\n    <li>‚úÖ <strong>Domain isolation:</strong> Different features can scale independently</li>\n    <li>‚úÖ <strong>Specialized optimization:</strong> Each shard can use different hardware/configuration</li>\n    <li>‚úÖ <strong>Team ownership:</strong> Different teams can own different shards</li>\n    <li>‚ùå <strong>Limited scalability:</strong> Individual tables still limited by single database capacity</li>\n    <li>‚ùå <strong>Cross-domain queries:</strong> Features spanning multiple shards become complex</li>\n  </ul>\n  <p><strong>Example:</strong> User profiles on one database, posts on another, analytics on a third.</p>\n</div>\n<div class=\"concept-section\">\n  <h3>Hybrid Approaches: The Best of Both</h3>\n  <p>Most large-scale systems combine both strategies:</p>\n  <ol>\n    <li><strong>Start with vertical sharding</strong> to separate major domains (users, content, analytics)</li>\n    <li><strong>Apply horizontal sharding</strong> to individual domains as they grow</li>\n    <li><strong>Result:</strong> Users database horizontally sharded by user_id, Posts database horizontally sharded by post_id</li>\n  </ol>\n</div>\n<div class=\"concept-section\">\n  <h3>Choosing Your Strategy</h3>\n  <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;\">\n    <div style=\"background: #e3f2fd; padding: 20px; border-radius: 10px;\">\n      <h4>Choose Horizontal When:</h4>\n      <ul>\n        <li>Single table dominates your database size</li>\n        <li>Queries mostly operate on individual records</li>\n        <li>You need to scale writes on specific tables</li>\n        <li>Data access patterns are well-partitioned</li>\n      </ul>\n    </div>\n    <div style=\"background: #f3e5f5; padding: 20px; border-radius: 10px;\">\n      <h4>Choose Vertical When:</h4>\n      <ul>\n        <li>Different features have different scaling needs</li>\n        <li>Some tables are read-heavy, others write-heavy</li>\n        <li>You want to isolate different teams' data</li>\n        <li>Cross-table joins are already minimal</li>\n      </ul>\n    </div>\n  </div>\n</div>\n<div class=\"exercise\">\n  <h3>üõ†Ô∏è Design Your Sharding Strategy</h3>\n  <p><strong>Scenario:</strong> You're building an e-commerce platform with these main data domains:</p>\n  <ul>\n    <li><strong>Users:</strong> 50M records, growing 10% monthly, heavy reads during browsing</li>\n    <li><strong>Products:</strong> 5M records, infrequent updates, read-heavy with search requirements</li>\n    <li><strong>Orders:</strong> 200M records, write-heavy during checkout, needs user + product data for display</li>\n    <li><strong>Analytics:</strong> Time-series data, write-heavy from events, separate reporting queries</li>\n  </ul>\n  <p><strong>Your task:</strong> Design a sharding strategy combining vertical and horizontal approaches. Specify which domains you'd separate vertically, and which you'd shard horizontally. Explain your reasoning for each decision.</p>\n  <p><strong>Consider:</strong> How would you handle the order display page that needs user info + product details + order history?</p>\n</div>"
      },
      {
        "id": 3,
        "title": "Sharding Key Design and Distribution Methods",
        "goals": [
          "Design effective sharding keys that ensure even data distribution",
          "Compare hash-based, range-based, and directory-based sharding methods",
          "Identify and avoid common sharding key pitfalls that create hotspots"
        ],
        "content": "<div class=\"concept-section\">\n  <h3>The Sharding Key: Your Most Critical Decision</h3>\n  <p>The sharding key determines how data gets distributed across your shards. Like choosing how to organize books in a library system‚Äîby author, by subject, or by acquisition date‚Äîyour choice affects every future query and determines whether your system scales smoothly or creates bottlenecks.</p>\n  <p>A good sharding key should:</p>\n  <ul>\n    <li>‚úÖ <strong>Distribute data evenly</strong> across shards</li>\n    <li>‚úÖ <strong>Minimize cross-shard queries</strong> for common operations</li>\n    <li>‚úÖ <strong>Remain stable</strong> over time (avoid frequent rebalancing)</li>\n    <li>‚úÖ <strong>Support your query patterns</strong> efficiently</li>\n  </ul>\n</div>\n<div class=\"concept-section\">\n  <h3>Hash-Based Sharding</h3>\n  <p>Apply a hash function to the sharding key to determine which shard stores the data. The hash output maps to a specific shard number.</p>\n  <ul>\n    <li>‚úÖ <strong>Even distribution:</strong> Hash functions naturally spread data uniformly</li>\n    <li>‚úÖ <strong>Simple routing:</strong> <code>shard = hash(key) % num_shards</code></li>\n    <li>‚úÖ <strong>No hotspots:</strong> Sequential keys don't cluster on one shard</li>\n    <li>‚ùå <strong>Range queries impossible:</strong> Related data scattered across shards</li>\n    <li>‚ùå <strong>Rebalancing complexity:</strong> Adding shards requires rehashing and migration</li>\n  </ul>\n  <p><strong>Best for:</strong> Random access patterns, user lookups, session data</p>\n</div>\n<div class=\"concept-section\">\n  <h3>Range-Based Sharding</h3>\n  <p>Partition data based on ranges of the sharding key values. For example, users A-M on shard1, N-Z on shard2.</p>\n  <ul>\n    <li>‚úÖ <strong>Range queries efficient:</strong> Related data stored together</li>\n    <li>‚úÖ <strong>Easy rebalancing:</strong> Split ranges without affecting other shards</li>\n    <li>‚úÖ <strong>Intuitive routing:</strong> Humans can understand the distribution</li>\n    <li>‚ùå <strong>Hotspot risk:</strong> Uneven data distribution (more names start with 'S' than 'X')</li>\n    <li>‚ùå <strong>Sequential writes:</strong> New data may concentrate on one shard</li>\n  </ul>\n  <p><strong>Best for:</strong> Time-series data, geographic data, alphabetical data with known distribution</p>\n</div>\n<div class=\"concept-section\">\n  <h3>Directory-Based Sharding</h3>\n  <p>Maintain a lookup service that maps sharding key values to specific shards. This adds flexibility but introduces a new component to manage.</p>\n  <ul>\n    <li>‚úÖ <strong>Maximum flexibility:</strong> Can implement any distribution logic</li>\n    <li>‚úÖ <strong>Easy migration:</strong> Update directory without moving data</li>\n    <li>‚úÖ <strong>Custom rules:</strong> Handle special cases and business logic</li>\n    <li>‚ùå <strong>Additional complexity:</strong> Directory service becomes a critical dependency</li>\n    <li>‚ùå <strong>Potential bottleneck:</strong> Directory lookups add latency</li>\n  </ul>\n  <p><strong>Best for:</strong> Complex business rules, tenant-based sharding, gradual migration scenarios</p>\n</div>\n<div class=\"concept-section\">\n  <h3>Common Sharding Key Anti-Patterns</h3>\n  <div style=\"background: #ffebee; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n    <h4>‚ö†Ô∏è Avoid These Pitfalls</h4>\n    <ul>\n      <li><strong>Timestamp-based keys:</strong> All new data goes to the latest shard</li>\n      <li><strong>Geographic keys without analysis:</strong> California gets 10x more traffic than Wyoming</li>\n      <li><strong>User ID without hashing:</strong> Early users get shard1, new users concentrate on latest shards</li>\n      <li><strong>Nullable sharding keys:</strong> All NULL values cluster together</li>\n      <li><strong>Low-cardinality keys:</strong> Only a few distinct values create uneven distribution</li>\n    </ul>\n  </div>\n</div>\n<div class=\"concept-section\">\n  <h3>Consistent Hashing: Advanced Distribution</h3>\n  <p>An improvement over simple modulo hashing that minimizes data movement when adding or removing shards. Instead of <code>hash(key) % shards</code>, use a hash ring where both keys and shards are placed on a circle.</p>\n  <ul>\n    <li>‚úÖ Adding a shard only affects adjacent shards, not all shards</li>\n    <li>‚úÖ Provides better load balancing with virtual nodes</li>\n    <li>‚ùå More complex to implement and understand</li>\n  </ul>\n</div>\n<div class=\"exercise\">\n  <h3>üõ†Ô∏è Choose the Right Sharding Strategy</h3>\n  <p><strong>Scenario:</strong> You're designing sharding for three different applications:</p>\n  <ol>\n    <li><strong>Social media posts:</strong> 1B posts, users query their own posts and recent posts from friends</li>\n    <li><strong>Financial transactions:</strong> Need to query by user, by date ranges, and generate monthly reports</li>\n    <li><strong>IoT sensor data:</strong> Time-series data, queries mostly by device_id and time ranges</li>\n  </ol>\n  <p><strong>Your task:</strong> For each application, propose:</p>\n  <ul>\n    <li>The optimal sharding key</li>\n    <li>Distribution method (hash, range, or directory)</li>\n    <li>How you'd handle the most common query patterns</li>\n  </ul>\n  <p><strong>Consider:</strong> What would happen if you chose the wrong sharding key for each scenario? How would performance degrade?</p>\n</div>"
      },
      {
        "id": 4,
        "title": "Managing Cross-Shard Operations and Consistency", 
        "goals": [
          "Understand the challenges of queries and transactions spanning multiple shards",
          "Learn strategies for distributed joins and aggregations across shards",
          "Choose appropriate consistency models for cross-shard operations"
        ],
        "content": "<div class=\"concept-section\">\n  <h3>The Cross-Shard Challenge</h3>\n  <p>Once you've sharded your data, the most complex problems arise when operations need to touch multiple shards. Imagine trying to calculate the total sales across all store locations‚Äîyou need to collect data from each location and aggregate it. In sharded databases, this becomes significantly more complex than a simple SQL GROUP BY.</p>\n  <p>Cross-shard operations fall into several categories, each with different complexity levels and solution approaches.</p>\n</div>\n<div class=\"concept-section\">\n  <h3>Types of Cross-Shard Operations</h3>\n  <ul>\n    <li><strong>Distributed Queries:</strong> SELECT across multiple shards (joins, aggregations)</li>\n    <li><strong>Distributed Transactions:</strong> ACID operations spanning shards</li>\n    <li><strong>Global Constraints:</strong> Unique constraints across all shards</li>\n    <li><strong>Schema Changes:</strong> Applying migrations to all shards consistently</li>\n  </ul>\n</div>\n<div class=\"concept-section\">\n  <h3>Strategies for Cross-Shard Queries</h3>\n  <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;\">\n    <div style=\"background: #e8f5e8; padding: 20px; border-radius: 10px;\">\n      <h4>Scatter-Gather Pattern</h4>\n      <ul>\n        <li>‚úÖ Send query to all relevant shards</li>\n        <li>‚úÖ Merge results at application layer</li>\n        <li>‚ùå Latency = slowest shard response</li>\n        <li>‚ùå Memory usage for large result sets</li>\n      </ul>\n    </div>\n    <div style=\"background: #e3f2fd; padding: 20px; border-radius: 10px;\">\n      <h4>Denormalization</h4>\n      <ul>\n        <li>‚úÖ Duplicate frequently-joined data</li>\n        <li>‚úÖ Single-shard queries for common patterns</li>\n        <li>‚ùå Storage overhead and sync complexity</li>\n        <li>‚ùå Eventual consistency challenges</li>\n      </ul>\n    </div>\n  </div>\n</div>\n<div class=\"concept-section\">\n  <h3>Distributed Transaction Approaches</h3>\n  <p><strong>Two-Phase Commit (2PC):</strong> Traditional ACID approach</p>\n  <ul>\n    <li>Phase 1: Coordinator asks all shards to prepare</li>\n    <li>Phase 2: If all agree, coordinator commits; otherwise aborts</li>\n    <li>‚ö†Ô∏è Blocking protocol‚Äîsystem stalls if coordinator fails</li>\n    <li>‚ö†Ô∏è Performance degrades with shard count</li>\n  </ul>\n  <p><strong>Saga Pattern:</strong> Sequence of local transactions</p>\n  <ul>\n    <li>Each step is a local transaction that can be compensated</li>\n    <li>If failure occurs, run compensation transactions in reverse order</li>\n    <li>‚úÖ Better availability and performance</li>\n    <li>‚ùå Eventual consistency only</li>\n  </ul>\n</div>\n<div class=\"concept-section\">\n  <h3>Practical Cross-Shard Solutions</h3>\n  <div style=\"background: #f8f9fa; padding: 10px; font-family: monospace; margin: 10px 0;\">\n    -- Example: User profile with order history across shards<br>\n    1. Query user shard: SELECT * FROM users WHERE user_id = 123<br>\n    2. Extract order_ids from user profile<br>\n    3. Determine which shards contain those orders<br>\n    4. Parallel queries to order shards<br>\n    5. Merge results in application layer\n  </div>\n  <p><strong>Alternative:</strong> Maintain denormalized \"user order summary\" in user shard for common queries</p>\n</div>\n<div class=\"concept-section\">\n  <h3>Consistency Models for Sharded Systems</h3>\n  <ul>\n    <li><strong>Strong Consistency:</strong> Use 2PC for critical operations (payments, inventory)</li>\n    <li><strong>Eventual Consistency:</strong> Accept temporary inconsistency for better performance</li>\n    <li><strong>Session Consistency:</strong> User sees their own writes immediately</li>\n    <li><strong>Causal Consistency:</strong> Related operations appear in correct order</li>\n  </ul>\n</div>\n<div class=\"concept-section\">\n  <h3>When to Avoid Cross-Shard Operations</h3>\n  <div style=\"background: #fff3e0; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n    <h4>‚ö†Ô∏è Design Warning Signs</h4>\n    <ul>\n      <li>More than 30% of queries require cross-shard operations</li>\n      <li>Critical user workflows depend on distributed transactions</li>\n      <li>Real-time reporting requires aggregating across all shards</li>\n    </ul>\n    <p><strong>Solution:</strong> Reconsider your sharding key or use separate read replicas/data warehouses for analytics</p>\n  </div>\n</div>\n<div class=\"exercise\">\n  <h3>üõ†Ô∏è Design Cross-Shard Solutions</h3>\n  <p><strong>Scenario:</strong> Your e-commerce platform is sharded by user_id. You need to implement these features:</p>\n  <ol>\n    <li><strong>Order placement:</strong> Deduct inventory (product shard) and create order (user shard)</li>\n    <li><strong>Monthly sales report:</strong> Total sales by product category across all users</li>\n    <li><strong>User dashboard:</strong> Show recent orders with product details and current inventory</li>\n  </ol>\n  <p><strong>Your task:</strong> For each feature, design a solution that addresses:</p>\n  <ul>\n    <li>Which consistency model you'd use and why</li>\n    <li>How you'd minimize cross-shard operations</li>\n    <li>What happens if one shard is temporarily unavailable</li>\n  </ul>\n  <p><strong>Consider:</strong> Would you use 2PC, saga pattern, or denormalization? What are the trade-offs?</p>\n</div>"
      },
      {
        "id": 5,
        "title": "Real-World Sharding: Case Studies and Implementation Trade-offs",
        "goals": [
          "Learn from real-world sharding implementations at scale (Instagram, Discord, Shopify)",
          "Understand the operational challenges and migration strategies",
          "Develop a decision framework for choosing sharding approaches"
        ],
        "content": "<div class=\"concept-section\">\n  <h3>Real-World Sharding Implementations</h3>\n  <p>Let's examine how major companies approached sharding challenges and the lessons learned from their implementations.</p>\n</div>\n<div class=\"concept-section\">\n  <h3>Instagram: Sharding User Data by ID</h3>\n  <p>Instagram shards their user data using a simple hash of user ID, with some interesting optimizations:</p>\n  <ul>\n    <li><strong>Sharding strategy:</strong> Hash-based sharding with 4,000 logical shards mapped to fewer physical databases</li>\n    <li><strong>ID generation:</strong> Custom ID format encoding shard information for efficient routing</li>\n    <li><strong>Migration approach:</strong> Gradual migration using dual-write pattern during transitions</li>\n    <li><strong>Lesson learned:</strong> Over-shard initially‚Äîeasier to consolidate than to split further</li>\n  </ul>\n  <p><a href=\"https://instagram-engineering.com/sharding-ids-at-instagram-1cf5a71e5a5c\" target=\"_blank\" rel=\"noopener noreferrer\">Instagram engineering blog</a></p>\n</div>\n<div class=\"concept-section\">\n  <h3>Discord: Message Sharding Challenges</h3>\n  <p>Discord faced unique challenges sharding chat messages with high write throughput:</p>\n  <ul>\n    <li><strong>Initial approach:</strong> MongoDB sharded by channel_id (caused celebrity channel hotspots)</li>\n    <li><strong>Redesign:</strong> Switched to Cassandra with time-based partitioning + channel_id</li>\n    <li><strong>Key insight:</strong> Combined sharding keys to distribute both storage and access patterns</li>\n    <li><strong>Lesson learned:</strong> Monitor for hotspots continuously; celebrity channels break assumptions</li>\n  </ul>\n  <p><a href=\"https://discord.com/blog/how-discord-stores-billions-of-messages\" target=\"_blank\" rel=\"noopener noreferrer\">Discord engineering blog</a></p>\n</div>\n<div class=\"concept-section\">\n  <h3>Shopify: Tenant-Based Sharding</h3>\n  <p>Shopify uses shop-based sharding to isolate merchant data:</p>\n  <ul>\n    <li><strong>Sharding strategy:</strong> Each shop's data stays on the same shard (strong locality)</li>\n    <li><strong>Benefits:</strong> Cross-shop queries unnecessary, simple backup/restore per merchant</li>\n    <li><strong>Challenge:</strong> Large shops can overwhelm individual shards</li>\n    <li><strong>Solution:</strong> Move large shops to dedicated infrastructure</li>\n  </ul>\n</div>\n<div class=\"concept-section\">\n  <h3>Common Migration Strategies</h3>\n  <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;\">\n    <div style=\"background: #e8f5e8; padding: 20px; border-radius: 10px;\">\n      <h4>Big Bang Migration</h4>\n      <ul>\n        <li>‚úÖ Simpler application logic during transition</li>\n        <li>‚úÖ Shorter dual-maintenance period</li>\n        <li>‚ùå High risk, longer downtime</li>\n        <li>‚ùå Harder to test thoroughly</li>\n      </ul>\n    </div>\n    <div style=\"background: #e3f2fd; padding: 20px; border-radius: 10px;\">\n      <h4>Gradual Migration</h4>\n      <ul>\n        <li>‚úÖ Lower risk, can validate incrementally</li>\n        <li>‚úÖ Easier rollback if issues arise</li>\n        <li>‚ùå Complex application logic during transition</li>\n        <li>‚ùå Longer project timeline</li>\n      </ul>\n    </div>\n  </div>\n</div>\n<div class=\"concept-section\">\n  <h3>Operational Challenges and Solutions</h3>\n  <ul>\n    <li><strong>Monitoring:</strong> Track metrics per shard, not just globally (shard-level CPU, query latency, storage growth)</li>\n    <li><strong>Backups:</strong> Coordinate backup timing across shards for consistency</li>\n    <li><strong>Schema migrations:</strong> Apply changes to all shards, handle failures gracefully</li>\n    <li><strong>Rebalancing:</strong> Plan for data migration when shards become uneven</li>\n    <li><strong>Disaster recovery:</strong> Single shard failure should not bring down entire system</li>\n  </ul>\n</div>\n<div class=\"concept-section\">\n  <h3>Decision Framework: When and How to Shard</h3>\n  <div style=\"background: #f8f9fa; padding: 10px; font-family: monospace; margin: 10px 0;\">\n    if (single_table_dominates_and_growing_fast) {<br>\n    &nbsp;&nbsp;‚Üí Horizontal sharding by primary key<br>\n    } else if (distinct_feature_domains) {<br>\n    &nbsp;&nbsp;‚Üí Vertical sharding first, then horizontal per domain<br>\n    } else if (tenant_based_access_patterns) {<br>\n    &nbsp;&nbsp;‚Üí Tenant-based sharding (like Shopify)<br>\n    } else if (heavy_analytics_workload) {<br>\n    &nbsp;&nbsp;‚Üí Consider separate OLAP system instead<br>\n    }\n  </div>\n</div>\n<div class=\"exercise\">\n  <h3>üõ†Ô∏è Design Your Migration Strategy</h3>\n  <p><strong>Scenario:</strong> You're the lead engineer for a 5-year-old social platform. Your monolithic PostgreSQL database (2TB, 50K writes/sec peak) is hitting limits. The main tables are:</p>\n  <ul>\n    <li><strong>users:</strong> 25M records, moderate growth</li>\n    <li><strong>posts:</strong> 500M records, high write volume</li>\n    <li><strong>friendships:</strong> 1B records, read-heavy</li>\n    <li><strong>notifications:</strong> 2B records, write-heavy, short retention</li>\n  </ul>\n  <p><strong>Your task:</strong> Design a complete sharding strategy including:</p>\n  <ol>\n    <li>Which tables to shard and by what keys</li>\n    <li>Migration approach (big bang vs gradual)</li>\n    <li>How to handle friend feed generation (needs posts from friends across shards)</li>\n    <li>Monitoring strategy to detect problems early</li>\n  </ol>\n  <p><strong>Consider:</strong> What would you do differently if this were a B2B SaaS platform instead of a consumer social network?</p>\n</div>\n<div class=\"concept-section\">\n  <h3>üéâ Database Sharding Mastery Complete!</h3>\n  <p>You've now mastered:</p>\n  <ul>\n    <li>‚úÖ Recognizing when databases need sharding</li>\n    <li>‚úÖ Choosing between horizontal and vertical sharding strategies</li>\n    <li>‚úÖ Designing effective sharding keys and distribution methods</li>\n    <li>‚úÖ Managing cross-shard operations and consistency trade-offs</li>\n    <li>‚úÖ Learning from real-world implementations and migration strategies</li>\n  </ul>\n  <p><strong>Next steps:</strong> Practice implementing sharding in a small project, study your current systems for sharding opportunities, or explore related topics like database federation and distributed consensus.</p>\n</div>"
      },
      {
        "id": 6,
        "title": "Database Sharding Knowledge Check",
        "goals": [
          "Test your understanding of sharding fundamentals and scaling triggers",
          "Evaluate your knowledge of sharding strategies and key design principles",
          "Assess your grasp of real-world implementation challenges and solutions"
        ],
        "content": "<div class=\"concept-section\">\n  <h3>üß† Test Your Database Sharding Mastery</h3>\n  <p>Time to put your knowledge to the test! This quiz covers key concepts from all 5 lessons. Select all correct answers for each question, then click \"Reveal Answers\" to see how you did.</p>\n  <p><strong>Instructions:</strong> Multiple answers may be correct for each question. Check all that apply!</p>\n</div>\n\n<div class=\"quiz-container\" style=\"margin: 20px 0;\">\n  <div class=\"quiz-question\" style=\"background: #f8f9fa; padding: 20px; margin: 15px 0; border-radius: 10px; border-left: 4px solid #007bff;\">\n    <h4>Question 1: Scaling Triggers (Lesson 1)</h4>\n    <p><strong>Which scenarios indicate that database sharding might be necessary?</strong></p>\n    <div class=\"quiz-options\">\n      <label><input type=\"checkbox\" data-question=\"1\" data-correct=\"true\"> Database CPU consistently above 70% despite query optimization</label><br>\n      <label><input type=\"checkbox\" data-question=\"1\" data-correct=\"false\"> Read queries are slower than 100ms</label><br>\n      <label><input type=\"checkbox\" data-question=\"1\" data-correct=\"true\"> Write throughput approaching 25K-50K operations/second</label><br>\n      <label><input type=\"checkbox\" data-question=\"1\" data-correct=\"true\"> Next server upgrade would cost 3x current infrastructure budget</label><br>\n      <label><input type=\"checkbox\" data-question=\"1\" data-correct=\"false\"> Database has more than 10 tables</label>\n    </div>\n  </div>\n\n  <div class=\"quiz-question\" style=\"background: #f8f9fa; padding: 20px; margin: 15px 0; border-radius: 10px; border-left: 4px solid #28a745;\">\n    <h4>Question 2: Horizontal vs Vertical Sharding (Lesson 2)</h4>\n    <p><strong>When should you choose horizontal sharding over vertical sharding?</strong></p>\n    <div class=\"quiz-options\">\n      <label><input type=\"checkbox\" data-question=\"2\" data-correct=\"true\"> A single large table dominates your database size</label><br>\n      <label><input type=\"checkbox\" data-question=\"2\" data-correct=\"false\"> Different features have completely different scaling needs</label><br>\n      <label><input type=\"checkbox\" data-question=\"2\" data-correct=\"true\"> Queries mostly operate on individual records rather than cross-table joins</label><br>\n      <label><input type=\"checkbox\" data-question=\"2\" data-correct=\"false\"> You want to isolate different teams' data ownership</label><br>\n      <label><input type=\"checkbox\" data-question=\"2\" data-correct=\"true\"> You need to scale write operations on specific high-volume tables</label>\n    </div>\n  </div>\n\n  <div class=\"quiz-question\" style=\"background: #f8f9fa; padding: 20px; margin: 15px 0; border-radius: 10px; border-left: 4px solid #ffc107;\">\n    <h4>Question 3: Sharding Key Anti-Patterns (Lesson 3)</h4>\n    <p><strong>Which sharding key choices are problematic and should be avoided?</strong></p>\n    <div class=\"quiz-options\">\n      <label><input type=\"checkbox\" data-question=\"3\" data-correct=\"true\"> Created_at timestamp for new user records</label><br>\n      <label><input type=\"checkbox\" data-question=\"3\" data-correct=\"false\"> Hash of user_id for user profiles</label><br>\n      <label><input type=\"checkbox\" data-question=\"3\" data-correct=\"true\"> Geographic region without analyzing traffic patterns</label><br>\n      <label><input type=\"checkbox\" data-question=\"3\" data-correct=\"true\"> User status with only 3 possible values (active, inactive, suspended)</label><br>\n      <label><input type=\"checkbox\" data-question=\"3\" data-correct=\"false\"> UUID generated on the client side</label>\n    </div>\n  </div>\n\n  <div class=\"quiz-question\" style=\"background: #f8f9fa; padding: 20px; margin: 15px 0; border-radius: 10px; border-left: 4px solid #dc3545;\">\n    <h4>Question 4: Distribution Methods (Lesson 3)</h4>\n    <p><strong>What are the advantages of hash-based sharding compared to range-based sharding?</strong></p>\n    <div class=\"quiz-options\">\n      <label><input type=\"checkbox\" data-question=\"4\" data-correct=\"true\"> Provides more even data distribution</label><br>\n      <label><input type=\"checkbox\" data-question=\"4\" data-correct=\"false\"> Makes range queries more efficient</label><br>\n      <label><input type=\"checkbox\" data-question=\"4\" data-correct=\"true\"> Prevents hotspots from sequential key patterns</label><br>\n      <label><input type=\"checkbox\" data-question=\"4\" data-correct=\"false\"> Easier to rebalance when adding new shards</label><br>\n      <label><input type=\"checkbox\" data-question=\"4\" data-correct=\"true\"> Simple routing logic (hash modulo shard count)</label>\n    </div>\n  </div>\n\n  <div class=\"quiz-question\" style=\"background: #f8f9fa; padding: 20px; margin: 15px 0; border-radius: 10px; border-left: 4px solid #6f42c1;\">\n    <h4>Question 5: Cross-Shard Operations (Lesson 4)</h4>\n    <p><strong>Which strategies help minimize the complexity of cross-shard operations?</strong></p>\n    <div class=\"quiz-options\">\n      <label><input type=\"checkbox\" data-question=\"5\" data-correct=\"true\"> Denormalizing frequently-joined data within shards</label><br>\n      <label><input type=\"checkbox\" data-question=\"5\" data-correct=\"false\"> Using two-phase commit for all multi-shard transactions</label><br>\n      <label><input type=\"checkbox\" data-question=\"5\" data-correct=\"true\"> Designing shard keys to keep related data together</label><br>\n      <label><input type=\"checkbox\" data-question=\"5\" data-correct=\"true\"> Using eventual consistency for non-critical cross-shard data</label><br>\n      <label><input type=\"checkbox\" data-question=\"5\" data-correct=\"false\"> Running all analytics queries across all shards in real-time</label>\n    </div>\n  </div>\n\n  <div class=\"quiz-question\" style=\"background: #f8f9fa; padding: 20px; margin: 15px 0; border-radius: 10px; border-left: 4px solid #20c997;\">\n    <h4>Question 6: Consistency Models (Lesson 4)</h4>\n    <p><strong>When should you choose the Saga pattern over Two-Phase Commit for distributed transactions?</strong></p>\n    <div class=\"quiz-options\">\n      <label><input type=\"checkbox\" data-question=\"6\" data-correct=\"true\"> When system availability is more important than strong consistency</label><br>\n      <label><input type=\"checkbox\" data-question=\"6\" data-correct=\"false\"> When you need ACID guarantees across all operations</label><br>\n      <label><input type=\"checkbox\" data-question=\"6\" data-correct=\"true\"> When dealing with long-running business processes</label><br>\n      <label><input type=\"checkbox\" data-question=\"6\" data-correct=\"true\"> When you want to avoid system blocking during coordinator failures</label><br>\n      <label><input type=\"checkbox\" data-question=\"6\" data-correct=\"false\"> When compensation logic is impossible to implement</label>\n    </div>\n  </div>\n\n  <div class=\"quiz-question\" style=\"background: #f8f9fa; padding: 20px; margin: 15px 0; border-radius: 10px; border-left: 4px solid #fd7e14;\">\n    <h4>Question 7: Real-World Implementations (Lesson 5)</h4>\n    <p><strong>What lessons did companies learn from their sharding implementations?</strong></p>\n    <div class=\"quiz-options\">\n      <label><input type=\"checkbox\" data-question=\"7\" data-correct=\"true\"> Instagram: Over-shard initially‚Äîeasier to consolidate than split further</label><br>\n      <label><input type=\"checkbox\" data-question=\"7\" data-correct=\"true\"> Discord: Monitor for hotspots continuously; popular channels break assumptions</label><br>\n      <label><input type=\"checkbox\" data-question=\"7\" data-correct=\"false\"> Shopify: Always keep all tenant data distributed evenly across shards</label><br>\n      <label><input type=\"checkbox\" data-question=\"7\" data-correct=\"true\"> General lesson: Combined sharding keys can distribute both storage and access patterns</label><br>\n      <label><input type=\"checkbox\" data-question=\"7\" data-correct=\"false\"> Big bang migrations are always preferable to gradual migrations</label>\n    </div>\n  </div>\n\n  <div class=\"quiz-question\" style=\"background: #f8f9fa; padding: 20px; margin: 15px 0; border-radius: 10px; border-left: 4px solid #e83e8c;\">\n    <h4>Question 8: Migration Strategy (Lesson 5)</h4>\n    <p><strong>What are the key considerations when planning a sharding migration?</strong></p>\n    <div class=\"quiz-options\">\n      <label><input type=\"checkbox\" data-question=\"8\" data-correct=\"true\"> Plan for shard-level monitoring and alerting</label><br>\n      <label><input type=\"checkbox\" data-question=\"8\" data-correct=\"true\"> Coordinate backup timing across shards for consistency</label><br>\n      <label><input type=\"checkbox\" data-question=\"8\" data-correct=\"false\"> Always use the same migration approach regardless of business requirements</label><br>\n      <label><input type=\"checkbox\" data-question=\"8\" data-correct=\"true\"> Design for graceful handling of single shard failures</label><br>\n      <label><input type=\"checkbox\" data-question=\"8\" data-correct=\"true\"> Consider separate systems for heavy analytics workloads</label>\n    </div>\n  </div>\n\n  <div style=\"text-align: center; margin: 30px 0;\">\n    <button id=\"revealBtn\" onclick=\"revealAnswers()\" style=\"background: #007bff; color: white; padding: 15px 30px; border: none; border-radius: 5px; font-size: 16px; cursor: pointer; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">üéØ Reveal Answers & Show Score</button>\n  </div>\n\n  <div id=\"results\" style=\"display: none; background: #e8f5e8; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n    <h3>üìä Your Results</h3>\n    <div id=\"score-display\"></div>\n    <div id=\"feedback\"></div>\n    <br>\n    <button onclick=\"retakeQuiz()\" style=\"background: #28a745; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer;\">üîÑ Retake Quiz</button>\n  </div>\n</div>\n\n<script>\nfunction revealAnswers() {\n  let totalQuestions = 8;\n  let correctAnswers = 0;\n  let totalPossiblePoints = 0;\n  let earnedPoints = 0;\n  \n  for (let q = 1; q <= totalQuestions; q++) {\n    let questionInputs = document.querySelectorAll(`input[data-question=\"${q}\"]`);\n    let questionCorrect = true;\n    let questionPoints = 0;\n    let maxQuestionPoints = 0;\n    \n    questionInputs.forEach(input => {\n      let isCorrect = input.dataset.correct === 'true';\n      let isChecked = input.checked;\n      \n      if (isCorrect) maxQuestionPoints++;\n      \n      if (isCorrect && isChecked) {\n        // Correct answer selected\n        input.parentElement.style.background = '#d4edda';\n        input.parentElement.style.color = '#155724';\n        input.parentElement.innerHTML += ' ‚úÖ';\n        questionPoints++;\n      } else if (isCorrect && !isChecked) {\n        // Correct answer not selected\n        input.parentElement.style.background = '#fff3cd';\n        input.parentElement.style.color = '#856404';\n        input.parentElement.innerHTML += ' ‚úÖ (missed)';\n        questionCorrect = false;\n      } else if (!isCorrect && isChecked) {\n        // Incorrect answer selected\n        input.parentElement.style.background = '#f8d7da';\n        input.parentElement.style.color = '#721c24';\n        input.parentElement.innerHTML += ' ‚ùå';\n        questionCorrect = false;\n      } else {\n        // Incorrect answer not selected (good)\n        input.parentElement.style.color = '#6c757d';\n      }\n      \n      input.disabled = true;\n    });\n    \n    totalPossiblePoints += maxQuestionPoints;\n    earnedPoints += questionPoints;\n    \n    if (questionCorrect) correctAnswers++;\n  }\n  \n  // Calculate scores\n  let percentageScore = Math.round((earnedPoints / totalPossiblePoints) * 100);\n  let perfectQuestions = correctAnswers;\n  \n  // Show results\n  document.getElementById('results').style.display = 'block';\n  document.getElementById('score-display').innerHTML = `\n    <h4>Score: ${earnedPoints}/${totalPossiblePoints} points (${percentageScore}%)</h4>\n    <p>Perfect questions: ${perfectQuestions}/${totalQuestions}</p>\n  `;\n  \n  // Provide feedback\n  let feedback = '';\n  if (percentageScore >= 90) {\n    feedback = 'üéâ <strong>Excellent!</strong> You have mastered database sharding concepts. You\\'re ready to design and implement sharding strategies in real-world systems.';\n  } else if (percentageScore >= 75) {\n    feedback = 'üëç <strong>Great job!</strong> You have a solid understanding of database sharding. Review the areas you missed and you\\'ll be ready for complex implementations.';\n  } else if (percentageScore >= 60) {\n    feedback = 'üìö <strong>Good progress!</strong> You understand the fundamentals but should review the lessons focusing on the questions you missed.';\n  } else {\n    feedback = 'üîÑ <strong>Keep learning!</strong> Consider reviewing the lessons again, especially focusing on the practical examples and case studies.';\n  }\n  \n  document.getElementById('feedback').innerHTML = feedback;\n  document.getElementById('revealBtn').style.display = 'none';\n  \n  // Scroll to results\n  document.getElementById('results').scrollIntoView({ behavior: 'smooth' });\n}\n\nfunction retakeQuiz() {\n  // Reset all inputs and styling\n  let allInputs = document.querySelectorAll('input[type=\"checkbox\"]');\n  allInputs.forEach(input => {\n    input.checked = false;\n    input.disabled = false;\n    input.parentElement.style.background = '';\n    input.parentElement.style.color = '';\n    // Remove checkmarks and x marks\n    input.parentElement.innerHTML = input.parentElement.innerHTML.replace(/ ‚úÖ| ‚úÖ \\(missed\\)| ‚ùå/g, '');\n  });\n  \n  // Hide results and show reveal button\n  document.getElementById('results').style.display = 'none';\n  document.getElementById('revealBtn').style.display = 'inline-block';\n  \n  // Scroll back to top of quiz\n  document.querySelector('.quiz-container').scrollIntoView({ behavior: 'smooth' });\n}\n</script>\n\n<div class=\"concept-section\" style=\"margin-top: 40px;\">\n  <h3>üéâ Database Sharding Journey Complete!</h3>\n  <p>Congratulations! You've completed the comprehensive Database Sharding learning journey. You now have the knowledge to:</p>\n  <ul>\n    <li>‚úÖ Identify when databases need sharding and recognize scaling bottlenecks</li>\n    <li>‚úÖ Choose between horizontal and vertical sharding strategies</li>\n    <li>‚úÖ Design effective sharding keys and avoid common pitfalls</li>\n    <li>‚úÖ Handle cross-shard operations and choose appropriate consistency models</li>\n    <li>‚úÖ Learn from real-world implementations and plan migration strategies</li>\n  </ul>\n  <p><strong>Next steps:</strong> Apply these concepts to your current projects, practice with small-scale implementations, or explore advanced topics like database federation and distributed consensus algorithms.</p>\n</div>"
      }
  ]
}